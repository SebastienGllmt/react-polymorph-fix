{"version":3,"sources":["../../source/components/Select.js"],"names":["SelectBase","props","focus","toggleOpen","state","isOpen","optionsElement","current","scrollTop","setState","toggleMouseLocation","mouseIsOverOptions","handleInputClick","event","stopPropagation","preventDefault","inputElement","document","activeElement","blur","handleChange","option","onChange","value","getSelectedOption","options","allowBlank","rootElement","context","themeId","theme","themeOverrides","composedTheme","ROOT_THEME_API","autoFocus","nextProps","bind","skin","rest","SelectSkin","skins","IDENTIFIERS","SELECT","isOpeningUpward","optionsMaxHeight","Component","displayName","defaultProps","Select"],"mappings":";;;;;;;;;;;AACA;;;;AAEA;;;;AAGA;;AAGA;;AACA;;AAGA;;;;;;;;;;;;AARA;;;AAGA;;;AAIA;;;IA+BMA,U;;;AAMJ;AAcA,sBAAYC,KAAZ,EAA0B;AAAA;;AAGxB;AAHwB,wHAClBA,KADkB;;AAAA,UAoC1BC,KApC0B,GAoClB;AAAA,aAAM,MAAKC,UAAL,EAAN;AAAA,KApCkB;;AAAA,UAsC1BA,UAtC0B,GAsCb,YAAM;AACjB,UAAI,MAAKC,KAAL,CAAWC,MAAX,IAAqB,MAAKC,cAA1B,IAA4C,MAAKA,cAAL,CAAoBC,OAApE,EAA6E;AAC3E;AACA,cAAKD,cAAL,CAAoBC,OAApB,CAA4BC,SAA5B,GAAwC,CAAxC;AACD;AACD,YAAKC,QAAL,CAAc,EAAEJ,QAAQ,CAAC,MAAKD,KAAL,CAAWC,MAAtB,EAAd;AACD,KA5CyB;;AAAA,UA8C1BK,mBA9C0B,GA8CJ;AAAA,aACpB,MAAKD,QAAL,CAAc,EAAEE,oBAAoB,CAAC,MAAKP,KAAL,CAAWO,kBAAlC,EAAd,CADoB;AAAA,KA9CI;;AAAA,UAkD1BC,gBAlD0B,GAkDP,UAACC,KAAD,EAAkC;AACnDA,YAAMC,eAAN;AACAD,YAAME,cAAN;;AAFmD,UAI3CC,YAJ2C,SAI3CA,YAJ2C;;AAKnD,UAAIA,aAAaT,OAAb,IAAwBU,SAASC,aAAT,KAA2BF,aAAaT,OAApE,EAA6E;AAC3ES,qBAAaT,OAAb,CAAqBY,IAArB;AACD;AACD,YAAKhB,UAAL;AACD,KA3DyB;;AAAA,UA6D1BiB,YA7D0B,GA6DX,UAACC,MAAD,EAAiBR,KAAjB,EAA6C;AAC1D;AACA,UAAI,MAAKZ,KAAL,CAAWqB,QAAf,EAAyB,MAAKrB,KAAL,CAAWqB,QAAX,CAAoBD,OAAOE,KAA3B,EAAkCV,KAAlC;AACzB;AACA,YAAKV,UAAL;AACD,KAlEyB;;AAAA,UAoE1BqB,iBApE0B,GAoEN,YAAM;AAAA,wBACe,MAAKvB,KADpB;AAAA,UAChBwB,OADgB,eAChBA,OADgB;AAAA,UACPF,KADO,eACPA,KADO;AAAA,UACAG,UADA,eACAA,UADA;AAAA;AAAA;AAAA;;AAAA;AAExB,6BAAqBD,OAArB,8HAA8B;AAAA,cAAnBJ,MAAmB;;AAC5B,cAAIA,OAAOE,KAAP,KAAiBA,KAArB,EAA4B,OAAOF,MAAP;AAC7B;AAJuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKxB,UAAI,CAACK,UAAL,EAAiB,OAAOD,QAAQ,CAAR,CAAP;AAClB,KA1EyB;;AAIxB,UAAKE,WAAL,GAAmB,0BAAnB;AACA,UAAKX,YAAL,GAAoB,0BAApB;AACA,UAAKV,cAAL,GAAsB,0BAAtB;;AANwB,QAQhBsB,OARgB,GAQ4B3B,KAR5B,CAQhB2B,OARgB;AAAA,QAQPC,OARO,GAQ4B5B,KAR5B,CAQP4B,OARO;AAAA,QAQEC,KARF,GAQ4B7B,KAR5B,CAQE6B,KARF;AAAA,QAQSC,cART,GAQ4B9B,KAR5B,CAQS8B,cART;;;AAUxB,UAAK3B,KAAL,GAAa;AACX4B,qBAAe,0BACb,wBAAWF,SAASF,QAAQE,KAA5B,EAAmCD,OAAnC,CADa,EAEb,wBAAWE,cAAX,EAA2BF,OAA3B,CAFa,EAGbD,QAAQK,cAHK,CADJ;AAMX5B,cAAQ,KANG;AAOXM,0BAAoB;AAPT,KAAb;AAVwB;AAmBzB;AAtCD;;;;;wCAwCoB;AAClB;AACA,UAAI,KAAKV,KAAL,CAAWiC,SAAf,EAA0B;AACxB,eAAO,KAAKhC,KAAL,EAAP;AACD;AACF;;;8CAEyBiC,S,EAAkB;AAC1C,uCAAoB,KAAKlC,KAAzB,EAAgCkC,SAAhC,EAA2C,KAAK1B,QAAL,CAAc2B,IAAd,CAAmB,IAAnB,CAA3C;AACD;;AAED;;AAEA;AACA;;;;6BAyCS;AAAA;;AACP;AADO,mBAUH,KAAKnC,KAVF;AAAA,UAGLoC,IAHK,UAGLA,IAHK;AAAA,UAILP,KAJK,UAILA,KAJK;AAAA,UAKLC,cALK,UAKLA,cALK;AAAA,UAMLG,SANK,UAMLA,SANK;AAAA,UAOLN,OAPK,UAOLA,OAPK;AAAA,UAQLF,UARK,UAQLA,UARK;AAAA,UASFY,IATE;;AAYP,UAAMC,aAAaF,QAAQT,QAAQY,KAAR,CAAcC,cAAYC,MAA1B,CAA3B;;AAEA,aACE;AAAC,wCAAD;AAAA;AACE,8BAAoB,KAAKtC,KAAL,CAAWO,kBADjC;AAEE,yBAAe,KAAKP,KAAL,CAAWC,MAF5B;AAGE,kCAAwB,KAAKJ,KAAL,CAAW0C,eAHrC;AAIE,sBAAY,KAAKrC,cAJnB;AAKE,mBAAS,KAAKqB,WALhB;AAME,sBAAY,KAAKxB;AANnB;AAQG;AAAA,cAAGyC,gBAAH,QAAGA,gBAAH;AAAA,iBACC,8BAAC,UAAD;AACE,oBAAQ,OAAKxC,KAAL,CAAWC,MADrB;AAEE,qBAAS,OAAKsB,WAFhB;AAGE,sBAAU,OAAKX,YAHjB;AAIE,wBAAY,OAAKV,cAJnB;AAKE,8BAAkBsC,gBALpB;AAME,mBAAO,OAAKxC,KAAL,CAAW4B,aANpB;AAOE,+BAAmB,OAAKR,iBAP1B;AAQE,8BAAkB,OAAKZ,gBARzB;AASE,0BAAc,OAAKQ,YATrB;AAUE,wBAAY,OAAKjB,UAVnB;AAWE,iCAAqB,OAAKO;AAX5B,aAYM4B,IAZN,EADD;AAAA;AARH,OADF;AA2BD;;;;EAzIsBO,gB;;AAAnB7C,U,CAOG8C,W,GAAc,Q;AAPjB9C,U,CAQG+C,Y,GAAe;AACpBrB,cAAY,IADQ;AAEpBQ,aAAW,KAFS;AAGpBN,WAAS,oCAHW;AAIpBe,mBAAiB,KAJG;AAKpBlB,WAAS,EALW;AAMpBK,SAAO,IANa;AAOpBC,kBAAgB,EAPI;AAQpBF,WAASY,cAAYC,MARD;AASpBnB,SAAO;AATa,C;AAoIjB,IAAMyB,0BAAS,0BAAUhD,UAAV,CAAf","file":"Select.js","sourcesContent":["// @flow\nimport React, { Component } from 'react';\nimport type { ComponentType, Element } from 'react';\nimport createRef from 'create-react-ref/lib/createRef';\n\n// internal components\nimport { GlobalListeners } from './HOC/GlobalListeners';\n\n// internal utility functions\nimport { createEmptyContext, withTheme } from './HOC/withTheme';\nimport { composeTheme, addThemeId, didThemePropsChange } from '../utils/themes';\n\n// import constants\nimport { IDENTIFIERS } from '.';\nimport type { ThemeContextProp } from './HOC/withTheme';\n\ntype Props = {\n  allowBlank: boolean,\n  autoFocus: boolean,\n  className?: string,\n  context: ThemeContextProp,\n  error?: string | Element<any>,\n  label?: string | Element<any>,\n  isOpeningUpward: boolean,\n  onBlur?: Function,\n  onChange?: Function,\n  onFocus?: Function,\n  optionRenderer?: Function,\n  options: Array<any>,\n  placeholder?: string,\n  skin?: ComponentType<any>,\n  theme: ?Object, // will take precedence over theme in context if passed\n  themeId: string,\n  themeOverrides: Object,\n  value: string\n};\n\ntype State = {\n  composedTheme: Object,\n  isOpen: boolean,\n  mouseIsOverOptions: boolean,\n};\n\nclass SelectBase extends Component<Props, State> {\n  // declare ref types\n  rootElement: ?Element<*>;\n  inputElement: Element<'input'>;\n  optionsElement: ?Element<*>;\n\n  // define static properties\n  static displayName = 'Select';\n  static defaultProps = {\n    allowBlank: true,\n    autoFocus: false,\n    context: createEmptyContext(),\n    isOpeningUpward: false,\n    options: [],\n    theme: null,\n    themeOverrides: {},\n    themeId: IDENTIFIERS.SELECT,\n    value: ''\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    // define ref\n    this.rootElement = createRef();\n    this.inputElement = createRef();\n    this.optionsElement = createRef();\n\n    const { context, themeId, theme, themeOverrides } = props;\n\n    this.state = {\n      composedTheme: composeTheme(\n        addThemeId(theme || context.theme, themeId),\n        addThemeId(themeOverrides, themeId),\n        context.ROOT_THEME_API\n      ),\n      isOpen: false,\n      mouseIsOverOptions: false,\n    };\n  }\n\n  componentDidMount() {\n    // check for autoFocus of input element\n    if (this.props.autoFocus) {\n      return this.focus();\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    didThemePropsChange(this.props, nextProps, this.setState.bind(this));\n  }\n\n  // ========= PUBLIC SKIN API =========\n\n  // applying focus to the input element will\n  // toggle options open because Select's input is read only\n  focus = () => this.toggleOpen();\n\n  toggleOpen = () => {\n    if (this.state.isOpen && this.optionsElement && this.optionsElement.current) {\n      // set Options scroll position to top on close\n      this.optionsElement.current.scrollTop = 0;\n    }\n    this.setState({ isOpen: !this.state.isOpen });\n  }\n\n  toggleMouseLocation = () => (\n    this.setState({ mouseIsOverOptions: !this.state.mouseIsOverOptions })\n  );\n\n  handleInputClick = (event: SyntheticMouseEvent<>) => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    const { inputElement } = this;\n    if (inputElement.current && document.activeElement === inputElement.current) {\n      inputElement.current.blur();\n    }\n    this.toggleOpen();\n  };\n\n  handleChange = (option: Object, event: SyntheticEvent<>) => {\n    // check if the user passed an onChange handler and call it\n    if (this.props.onChange) this.props.onChange(option.value, event);\n    // onChange is called when an option is selected, so close options\n    this.toggleOpen();\n  };\n\n  getSelectedOption = () => {\n    const { options, value, allowBlank } = this.props;\n    for (const option of options) {\n      if (option.value === value) return option;\n    }\n    if (!allowBlank) return options[0];\n  };\n\n  render() {\n    // destructuring props ensures only the \"...rest\" get passed down\n    const {\n      skin,\n      theme,\n      themeOverrides,\n      autoFocus,\n      context,\n      allowBlank,\n      ...rest\n    } = this.props;\n\n    const SelectSkin = skin || context.skins[IDENTIFIERS.SELECT];\n\n    return (\n      <GlobalListeners\n        mouseIsOverOptions={this.state.mouseIsOverOptions}\n        optionsIsOpen={this.state.isOpen}\n        optionsIsOpeningUpward={this.props.isOpeningUpward}\n        optionsRef={this.optionsElement}\n        rootRef={this.rootElement}\n        toggleOpen={this.toggleOpen}\n      >\n        {({ optionsMaxHeight }) => (\n          <SelectSkin\n            isOpen={this.state.isOpen}\n            rootRef={this.rootElement}\n            inputRef={this.inputElement}\n            optionsRef={this.optionsElement}\n            optionsMaxHeight={optionsMaxHeight}\n            theme={this.state.composedTheme}\n            getSelectedOption={this.getSelectedOption}\n            handleInputClick={this.handleInputClick}\n            handleChange={this.handleChange}\n            toggleOpen={this.toggleOpen}\n            toggleMouseLocation={this.toggleMouseLocation}\n            {...rest}\n          />\n        )}\n      </GlobalListeners>\n    );\n  }\n}\n\nexport const Select = withTheme(SelectBase);\n"]}