{"version":3,"sources":["../../source/utils/themes.js"],"names":["appendToProperty","dest","name","value","composeComponentStyles","componentStyles","componentTheme","property","addThemeId","theme","themeId","themeIdExists","themeIdIsObj","composeTheme","themeOverrides","themeAPI","composedTheme","componentId","didThemePropsChange","setState","context","nextContext","nextThemeId","nextTheme","nextOverrides","ROOT_THEME_API"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AAGO,IAAMA,8CAAmB,SAAnBA,gBAAmB,CAACC,IAAD,EAAWC,IAAX,EAAyBC,KAAzB,EAA2C;AACzEF,OAAKC,IAAL,MAAe,EAAf,GAAqBD,KAAKC,IAAL,IAAaC,KAAlC,GAA4CF,KAAKC,IAAL,KAAc,MAAMC,KAAhE;AACD,CAFM;;AAIA,IAAMC,0DAAyB,SAAzBA,sBAAyB,CAACC,eAAD,EAAsBC,cAAtB,EAA6C;AACjF,MAAI,CAACA,cAAL,EAAqB;AACrB,OAAK,IAAMC,QAAX,IAAuBF,eAAvB,EAAwC;AACtC,QAAI,wBAAYA,eAAZ,EAA6BE,QAA7B,CAAJ,EAA4C;AAC1C,UAAI,wBAAYD,cAAZ,EAA4BC,QAA5B,CAAJ,EAA2C;AACzCP,yBAAiBK,eAAjB,EAAkCE,QAAlC,EAA4CD,eAAeC,QAAf,CAA5C;AACD;AACF;AACF;AACF,CATM;;AAWP;AACA;AACA;AACA;AACO,IAAMC,kCAAa,SAAbA,UAAa,GAAiD;AAAA,MAAhDC,KAAgD,uEAAhC,EAAgC;AAAA,MAA5BC,OAA4B;;AACzE,MAAID,SAAS,CAAC,uBAAQA,KAAR,CAAV,IAA4BC,OAAhC,EAAyC;AACvC,QAAMC,gBAAgB,wBAAYF,KAAZ,EAAmBC,OAAnB,CAAtB;AACA,QAAME,eAAe,QAAOH,MAAMC,OAAN,CAAP,MAA0B,QAA/C;AACA,WAAQC,iBAAiBC,YAAlB,GAAkCH,KAAlC,uBAA6CC,OAA7C,EAAuDD,KAAvD,CAAP;AACD;AACD,SAAOA,KAAP;AACD,CAPM;;AASP;;;;;;;;;;AAUO,IAAMI,sCAAe,SAAfA,YAAe,GAIvB;AAAA,MAHHJ,KAGG,uEAHa,EAGb;AAAA,MAFHK,cAEG,uEAFsB,EAEtB;AAAA,MADHC,QACG,uEADgB,EAChB;;AACH;AACA,MAAI,uBAAQD,cAAR,CAAJ,EAA6B,OAAOL,KAAP;;AAE7B;AACA,MAAMO,gBAAgB,yBAAUD,QAAV,CAAtB;;AAEA,OAAK,IAAME,WAAX,IAA0BF,QAA1B,EAAoC;AAClC,QAAI,wBAAYC,aAAZ,EAA2BC,WAA3B,CAAJ,EAA6C;AAC3C,UAAMZ,kBAAkBW,cAAcC,WAAd,CAAxB;AACAb,6BAAuBC,eAAvB,EAAwCI,MAAMQ,WAAN,CAAxC;AACAb,6BAAuBC,eAAvB,EAAwCS,eAAeG,WAAf,CAAxC;AACD;AACF;AACD,SAAOD,aAAP;AACD,CAnBM;;AA4BP;AACA;AACA;AACO,IAAME,oDAAsB,SAAtBA,mBAAsB,eAajCC,QAbiC,EAc9B;AAAA,MAZDC,OAYC,SAZDA,OAYC;AAAA,MAXDV,OAWC,SAXDA,OAWC;AAAA,MAVDD,KAUC,SAVDA,KAUC;AAAA,MATDK,cASC,SATDA,cASC;AAAA,MANQO,WAMR,SANDD,OAMC;AAAA,MALQE,WAKR,SALDZ,OAKC;AAAA,MAJMa,SAIN,SAJDd,KAIC;AAAA,MAHee,aAGf,SAHDV,cAGC;;AACH,MACE,CAAC,uBAAQM,OAAR,EAAiBC,WAAjB,CAAD,IACA,CAAC,uBAAQX,OAAR,EAAiBY,WAAjB,CADD,IAEA,CAAC,uBAAQb,KAAR,EAAec,SAAf,CAFD,IAGA,CAAC,uBAAQT,cAAR,EAAwBU,aAAxB,CAJH,EAKE;AACAL,aAAS;AAAA,aAAO;AACdH,uBAAeH,aACbL,WAAWe,aAAaF,YAAYZ,KAApC,EAA2Ca,WAA3C,CADa,EAEbd,WAAWgB,aAAX,EAA0BF,WAA1B,CAFa,EAGbD,YAAYI,cAHC;AADD,OAAP;AAAA,KAAT;AAOD;AACF,CA7BM","file":"themes.js","sourcesContent":["// @flow\nimport { cloneDeep, isEmpty, isEqual } from 'lodash';\nimport { hasProperty } from './props';\nimport type { ThemeContextProp } from '../components/HOC/withTheme';\n\nexport const appendToProperty = (dest: {}, name: string, value: string) => {\n  dest[name] === '' ? (dest[name] = value) : (dest[name] += ' ' + value);\n};\n\nexport const composeComponentStyles = (componentStyles: {}, componentTheme: {}) => {\n  if (!componentTheme) return;\n  for (const property in componentStyles) {\n    if (hasProperty(componentStyles, property)) {\n      if (hasProperty(componentTheme, property)) {\n        appendToProperty(componentStyles, property, componentTheme[property]);\n      }\n    }\n  }\n};\n\n// checks for the existence of a property on theme\n// that matches the value of themeId (string)\n// if the property exists, also checks the type of\n// theme[themeId] to ensure it's an object\nexport const addThemeId = (theme: Object = {}, themeId: string): Object => {\n  if (theme && !isEmpty(theme) && themeId) {\n    const themeIdExists = hasProperty(theme, themeId);\n    const themeIdIsObj = typeof theme[themeId] === 'object';\n    return (themeIdExists && themeIdIsObj) ? theme : { [themeId]: theme };\n  }\n  return theme;\n};\n\n/**\n * Composes a base theme with the given overrides, which should\n * be provided in the same schema, defined by the theme API param.\n *\n * @param theme - The base theme to be composed with overrides\n * @param themeOverrides - The custom overrides for the base theme\n * @param themeAPI - The theme API schema that should be used for composition\n * @returns {{}} - The composed theme\n */\n\nexport const composeTheme = (\n  theme: Object = {},\n  themeOverrides: Object = {},\n  themeAPI: Object = {}\n) => {\n  // Return theme if there are no overrides provided\n  if (isEmpty(themeOverrides)) return theme;\n\n  // final object to be returned\n  const composedTheme = cloneDeep(themeAPI);\n\n  for (const componentId in themeAPI) {\n    if (hasProperty(composedTheme, componentId)) {\n      const componentStyles = composedTheme[componentId];\n      composeComponentStyles(componentStyles, theme[componentId]);\n      composeComponentStyles(componentStyles, themeOverrides[componentId]);\n    }\n  }\n  return composedTheme;\n};\n\ntype ThemeProps = Object & {\n  context: ThemeContextProp,\n  themeId: string,\n  theme: ?Object,\n  themeOverrides: Object\n};\n\n// Used in componentWillReceiveProps, this function compares the current\n// set of theme related props against the next set to see if any have changed.\n// If true, a component's theme is recomposed and local state is updated\nexport const didThemePropsChange = (\n  {\n    context,\n    themeId,\n    theme,\n    themeOverrides\n  }: ThemeProps,\n  {\n    context: nextContext,\n    themeId: nextThemeId,\n    theme: nextTheme,\n    themeOverrides: nextOverrides\n  }: ThemeProps,\n  setState: Function\n) => {\n  if (\n    !isEqual(context, nextContext) ||\n    !isEqual(themeId, nextThemeId) ||\n    !isEqual(theme, nextTheme) ||\n    !isEqual(themeOverrides, nextOverrides)\n  ) {\n    setState(() => ({\n      composedTheme: composeTheme(\n        addThemeId(nextTheme || nextContext.theme, nextThemeId),\n        addThemeId(nextOverrides, nextThemeId),\n        nextContext.ROOT_THEME_API\n      )\n    }));\n  }\n};\n"]}