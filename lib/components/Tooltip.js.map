{"version":3,"sources":["../../source/components/Tooltip.js"],"names":["TooltipBase","props","context","themeId","theme","themeOverrides","state","composedTheme","ROOT_THEME_API","nextProps","setState","bind","skin","rest","TooltipSkin","skins","IDENTIFIERS","TOOLTIP","Component","displayName","defaultProps","isOpeningUpward","isTransparent","arrowRelativeToTip","Tooltip"],"mappings":";;;;;;;;;;;AACA;;;;AAIA;;AACA;;AAGA;;;;;;;;;;;;AALA;;;AAIA;;;IAuBMA,W;;;AACJ;AAYA,uBAAYC,KAAZ,EAA0B;AAAA;;AAAA,0HAClBA,KADkB;;AAAA,QAGhBC,OAHgB,GAG4BD,KAH5B,CAGhBC,OAHgB;AAAA,QAGPC,OAHO,GAG4BF,KAH5B,CAGPE,OAHO;AAAA,QAGEC,KAHF,GAG4BH,KAH5B,CAGEG,KAHF;AAAA,QAGSC,cAHT,GAG4BJ,KAH5B,CAGSI,cAHT;;;AAKxB,UAAKC,KAAL,GAAa;AACXC,qBAAe,0BACb,wBAAWH,SAASF,QAAQE,KAA5B,EAAmCD,OAAnC,CADa,EAEb,wBAAWE,cAAX,EAA2BF,OAA3B,CAFa,EAGbD,QAAQM,cAHK;AADJ,KAAb;AALwB;AAYzB;;;;8CAEyBC,S,EAAkB;AAC1C,uCAAoB,KAAKR,KAAzB,EAAgCQ,SAAhC,EAA2C,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAA3C;AACD;;;6BAEQ;AACP;AADO,mBAEmD,KAAKV,KAFxD;AAAA,UAECW,IAFD,UAECA,IAFD;AAAA,UAEOR,KAFP,UAEOA,KAFP;AAAA,UAEcC,cAFd,UAEcA,cAFd;AAAA,UAE8BH,OAF9B,UAE8BA,OAF9B;AAAA,UAE0CW,IAF1C;;AAIP,UAAMC,cAAcF,QAAQV,QAAQa,KAAR,CAAcC,cAAYC,OAA1B,CAA5B;;AAEA,aAAO,8BAAC,WAAD,aAAa,OAAO,KAAKX,KAAL,CAAWC,aAA/B,IAAkDM,IAAlD,EAAP;AACD;;;;EAtCuBK,gB;;AAApBlB,W,CAEGmB,W,GAAc,S;AAFjBnB,W,CAGGoB,Y,GAAe;AACpBlB,WAAS,oCADW;AAEpBmB,mBAAiB,IAFG;AAGpBC,iBAAe,IAHK;AAIpBC,sBAAoB,KAJA;AAKpBnB,SAAO,IALa;AAMpBD,WAASa,cAAYC,OAND;AAOpBZ,kBAAgB;AAPI,C;AAsCjB,IAAMmB,4BAAU,0BAAUxB,WAAV,CAAhB","file":"Tooltip.js","sourcesContent":["// @flow\nimport React, { Component } from 'react';\nimport type { ComponentType, Element } from 'react';\n\n// internal utility functions\nimport { createEmptyContext, withTheme } from './HOC/withTheme';\nimport { composeTheme, addThemeId, didThemePropsChange } from '../utils/themes';\n\n// import constants\nimport { IDENTIFIERS } from '.';\nimport type { ThemeContextProp } from './HOC/withTheme';\n\ntype Props = {\n  className?: string,\n  context: ThemeContextProp,\n  isAligningRight?: boolean,\n  isBounded?: boolean,\n  isOpeningUpward: boolean,\n  isTransparent: boolean,\n  arrowRelativeToTip: boolean,\n  skin?: ComponentType<any>,\n  theme: ?Object, // will take precedence over theme in context if passed\n  themeOverrides: Object, // custom css/scss from user that adheres to component's theme API\n  themeId: string,\n  tip?: string | Element<any>\n};\n\ntype State = {\n  composedTheme: Object\n};\n\nclass TooltipBase extends Component<Props, State> {\n  // define static properties\n  static displayName = 'Tooltip';\n  static defaultProps = {\n    context: createEmptyContext(),\n    isOpeningUpward: true,\n    isTransparent: true,\n    arrowRelativeToTip: false,\n    theme: null,\n    themeId: IDENTIFIERS.TOOLTIP,\n    themeOverrides: {}\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    const { context, themeId, theme, themeOverrides } = props;\n\n    this.state = {\n      composedTheme: composeTheme(\n        addThemeId(theme || context.theme, themeId),\n        addThemeId(themeOverrides, themeId),\n        context.ROOT_THEME_API\n      )\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    didThemePropsChange(this.props, nextProps, this.setState.bind(this));\n  }\n\n  render() {\n    // destructuring props ensures only the \"...rest\" get passed down\n    const { skin, theme, themeOverrides, context, ...rest } = this.props;\n\n    const TooltipSkin = skin || context.skins[IDENTIFIERS.TOOLTIP];\n\n    return <TooltipSkin theme={this.state.composedTheme} {...rest} />;\n  }\n}\n\nexport const Tooltip = withTheme(TooltipBase);\n"]}