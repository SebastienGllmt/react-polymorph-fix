{"version":3,"sources":["../../../source/skins/simple/AutocompleteSkin.js"],"names":["AutocompleteSkin","props","theme","themeId","filteredAndLimitedOptions","filteredOptions","maxVisibleOptions","canMoreOptionsBeSelected","selectedOptions","length","maxSelections","placeholder","renderSelectedOptions","renderSelections","getSelectionProps","map","selectedOption","index","selectedWordBox","selectedWordValue","selectedWordRemoveButton","removeOption","bind","renderContent","error","inputRef","label","FormFieldSkin","autocompleteContent","isOpen","opened","hasSelectedWords","errored","suggestionsRef","selectedWords","inputValue","handleInputChange","onKeyDown","className","autocompleteWrapper","handleAutocompleteClick","rootRef","isOpeningUpward","handleChange","optionsRef","optionsMaxHeight","renderOptions","OptionsSkin","toggleMouseLocation","toggleOpen"],"mappings":"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","file":"AutocompleteSkin.js","sourcesContent":["// @flow\nimport React from 'react';\nimport type { ElementRef, Element } from 'react';\n\n// external libraries\nimport _ from 'lodash';\nimport classnames from 'classnames';\n\n// components\nimport { FormField } from '../../components/FormField';\nimport { Options } from '../../components/Options';\n\n// skins\nimport { FormFieldSkin } from './FormFieldSkin';\nimport { OptionsSkin } from './OptionsSkin';\n\ntype Props = {\n  className: string,\n  error: string,\n  filteredOptions: Array<any>,\n  getSelectionProps: Function,\n  handleAutocompleteClick: Function,\n  handleChange: Function,\n  handleInputChange: Function,\n  inputRef: ElementRef<any>,\n  inputValue: string,\n  isOpeningUpward: boolean,\n  isOpen: boolean,\n  label: string | Element<any>,\n  maxSelections: number,\n  maxVisibleOptions: number,\n  onKeyDown: Function,\n  options: Array<any>,\n  optionsRef: ElementRef<any>,\n  optionsMaxHeight: number,\n  placeholder: string,\n  removeOption: Function,\n  renderSelections: Function,\n  renderOptions: Function,\n  rootRef: ElementRef<any>,\n  selectedOptions: Array<any>,\n  suggestionsRef: ElementRef<any>,\n  theme: Object,\n  themeId: string,\n  toggleMouseLocation: Function,\n  toggleOpen: Function,\n};\n\nexport const AutocompleteSkin = (props: Props) => {\n  const theme = props.theme[props.themeId];\n\n  const filteredAndLimitedOptions = _.slice(\n    props.filteredOptions,\n    0,\n    props.maxVisibleOptions\n  );\n\n  // show placeholder only if no maximum selections declared or maximum not reached\n  const canMoreOptionsBeSelected =\n    props.selectedOptions.length < props.maxSelections;\n\n  const placeholder =\n    !props.maxSelections || canMoreOptionsBeSelected ? props.placeholder : '';\n\n  const renderSelectedOptions = () => {\n    // check if the user passed a renderSelections function\n    if (props.selectedOptions && props.renderSelections) {\n      // call custom renderSelections function\n      return props.renderSelections(props.getSelectionProps);\n    } else if (props.selectedOptions && !props.renderSelections) {\n      // render default skin\n      return props.selectedOptions.map((selectedOption, index) => (\n        <span className={theme.selectedWordBox} key={index}>\n          <span className={theme.selectedWordValue}>\n            {selectedOption}\n            <span\n              role=\"presentation\"\n              aria-hidden\n              className={theme.selectedWordRemoveButton}\n              onClick={props.removeOption.bind(null, index)}\n            >\n              &times;\n            </span>\n          </span>\n        </span>\n      ));\n    }\n    return null;\n  };\n\n  // A label, input, and selected words are the content\n  const renderContent = () => (\n    <FormField\n      error={props.error}\n      inputRef={props.inputRef}\n      label={props.label}\n      skin={FormFieldSkin}\n      render={() => (\n        <div\n          className={classnames([\n            theme.autocompleteContent,\n            props.isOpen ? theme.opened : null,\n            props.selectedOptions.length\n              ? theme.hasSelectedWords\n              : null,\n            props.error ? theme.errored : null\n          ])}\n          ref={props.suggestionsRef}\n        >\n          <div className={theme.selectedWords}>\n            {renderSelectedOptions()}\n            <input\n              ref={props.inputRef}\n              placeholder={placeholder}\n              value={props.inputValue}\n              onChange={props.handleInputChange}\n              onKeyDown={props.onKeyDown}\n            />\n          </div>\n        </div>\n      )}\n    />\n  );\n\n  return (\n    <div\n      aria-hidden\n      className={classnames([props.className, theme.autocompleteWrapper])}\n      onClick={props.handleAutocompleteClick}\n      ref={props.rootRef}\n      role=\"presentation\"\n    >\n\n      {renderContent()}\n\n      <Options\n        isOpen={props.isOpen}\n        isOpeningUpward={props.isOpeningUpward}\n        noResults={!props.filteredOptions.length}\n        onChange={props.handleChange}\n        options={filteredAndLimitedOptions}\n        optionsRef={props.optionsRef}\n        optionsMaxHeight={props.optionsMaxHeight}\n        render={props.renderOptions}\n        resetOnClose\n        selectedOptions={props.selectedOptions}\n        skin={OptionsSkin}\n        targetRef={props.suggestionsRef}\n        toggleMouseLocation={props.toggleMouseLocation}\n        toggleOpen={props.toggleOpen}\n      />\n    </div>\n  );\n};\n"]}