{"version":3,"sources":["../../source/components/LoadingSpinner.js"],"names":["LoadingSpinnerBase","props","context","themeId","theme","themeOverrides","state","composedTheme","ROOT_THEME_API","nextProps","setState","bind","skin","rest","LoadingSpinnerSkin","skins","IDENTIFIERS","LOADING_SPINNER","Component","displayName","defaultProps","big","visible","LoadingSpinner"],"mappings":";;;;;;;;;;;AACA;;;;AAIA;;AACA;;AAGA;;;;;;;;;;;;AALA;;;AAIA;;;IAmBMA,kB;;;AACJ;AAWA,8BAAYC,KAAZ,EAA0B;AAAA;;AAAA,wIAClBA,KADkB;;AAAA,QAGhBC,OAHgB,GAG4BD,KAH5B,CAGhBC,OAHgB;AAAA,QAGPC,OAHO,GAG4BF,KAH5B,CAGPE,OAHO;AAAA,QAGEC,KAHF,GAG4BH,KAH5B,CAGEG,KAHF;AAAA,QAGSC,cAHT,GAG4BJ,KAH5B,CAGSI,cAHT;;;AAKxB,UAAKC,KAAL,GAAa;AACXC,qBAAe,0BACb,wBAAWH,SAASF,QAAQE,KAA5B,EAAmCD,OAAnC,CADa,EAEb,wBAAWE,cAAX,EAA2BF,OAA3B,CAFa,EAGbD,QAAQM,cAHK;AADJ,KAAb;AALwB;AAYzB;;;;8CAEyBC,S,EAAkB;AAC1C,uCAAoB,KAAKR,KAAzB,EAAgCQ,SAAhC,EAA2C,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAA3C;AACD;;;6BAEQ;AACP;AADO,mBAQH,KAAKV,KARF;AAAA,UAGLW,IAHK,UAGLA,IAHK;AAAA,UAILR,KAJK,UAILA,KAJK;AAAA,UAKLC,cALK,UAKLA,cALK;AAAA,UAMLH,OANK,UAMLA,OANK;AAAA,UAOFW,IAPE;;AAUP,UAAMC,qBAAqBF,QAAQV,QAAQa,KAAR,CAAcC,cAAYC,eAA1B,CAAnC;;AAEA,aAAO,8BAAC,kBAAD,aAAoB,OAAO,KAAKX,KAAL,CAAWC,aAAtC,IAAyDM,IAAzD,EAAP;AACD;;;;EA3C8BK,gB;;AAA3BlB,kB,CAEGmB,W,GAAc,gB;AAFjBnB,kB,CAGGoB,Y,GAAe;AACpBC,OAAK,KADe;AAEpBnB,WAAS,oCAFW;AAGpBE,SAAO,IAHa;AAIpBD,WAASa,cAAYC,eAJD;AAKpBZ,kBAAgB,EALI;AAMpBiB,WAAS;AANW,C;AA2CjB,IAAMC,0CAAiB,0BAAUvB,kBAAV,CAAvB","file":"LoadingSpinner.js","sourcesContent":["// @flow\nimport React, { Component } from 'react';\nimport type { ComponentType } from 'react';\n\n// internal utility functions\nimport { createEmptyContext, withTheme } from './HOC/withTheme';\nimport { composeTheme, addThemeId, didThemePropsChange } from '../utils/themes';\n\n// import constants\nimport { IDENTIFIERS } from '.';\nimport type { ThemeContextProp } from './HOC/withTheme';\n\ntype Props = {\n  big: boolean,\n  className?: string,\n  context: ThemeContextProp,\n  skin?: ComponentType<any>,\n  theme: ?Object, // will take precedence over theme in context if passed\n  themeId: string,\n  themeOverrides: Object,\n  visible: boolean\n};\n\ntype State = {\n  composedTheme: Object\n};\n\nclass LoadingSpinnerBase extends Component<Props, State> {\n  // define static properties\n  static displayName = 'LoadingSpinner';\n  static defaultProps = {\n    big: false,\n    context: createEmptyContext(),\n    theme: null,\n    themeId: IDENTIFIERS.LOADING_SPINNER,\n    themeOverrides: {},\n    visible: true\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    const { context, themeId, theme, themeOverrides } = props;\n\n    this.state = {\n      composedTheme: composeTheme(\n        addThemeId(theme || context.theme, themeId),\n        addThemeId(themeOverrides, themeId),\n        context.ROOT_THEME_API\n      )\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    didThemePropsChange(this.props, nextProps, this.setState.bind(this));\n  }\n\n  render() {\n    // destructuring props ensures only the \"...rest\" get passed down\n    const {\n      skin,\n      theme,\n      themeOverrides,\n      context,\n      ...rest\n    } = this.props;\n\n    const LoadingSpinnerSkin = skin || context.skins[IDENTIFIERS.LOADING_SPINNER];\n\n    return <LoadingSpinnerSkin theme={this.state.composedTheme} {...rest} />;\n  }\n}\n\nexport const LoadingSpinner = withTheme(LoadingSpinnerBase);\n"]}