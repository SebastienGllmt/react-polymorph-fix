{"version":3,"sources":["../../../source/components/layout/GridItem.js"],"names":["GridItem","_assembleInlineGridItem","gridItemProps","alignSelf","column","columnStart","columnEnd","gridArea","justifySelf","placeSelf","row","rowEnd","rowStart","inlineClasses","gridColumn","gridColumnStart","gridColumnEnd","gridRow","gridRowEnd","gridRowStart","props","children","className","theme","inlineGridItem","Component","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;AACA;;;;AAKA;;;;;;;;;;;;AADA;;;IAmBaA,Q,WAAAA,Q;;;;;;;;;;;;;;0LAGXC,uB,GAA0B,UAACC,aAAD,EAA2B;AACnD;AACA,UAAI,uBAAQ,mCAAYA,aAAZ,EAAR,CAAJ,EAA2C;AAAE;AAAS;;AAFH,UAKjDC,SALiD,GAe/CD,aAf+C,CAKjDC,SALiD;AAAA,UAMjDC,MANiD,GAe/CF,aAf+C,CAMjDE,MANiD;AAAA,UAOjDC,WAPiD,GAe/CH,aAf+C,CAOjDG,WAPiD;AAAA,UAQjDC,SARiD,GAe/CJ,aAf+C,CAQjDI,SARiD;AAAA,UASjDC,QATiD,GAe/CL,aAf+C,CASjDK,QATiD;AAAA,UAUjDC,WAViD,GAe/CN,aAf+C,CAUjDM,WAViD;AAAA,UAWjDC,SAXiD,GAe/CP,aAf+C,CAWjDO,SAXiD;AAAA,UAYjDC,GAZiD,GAe/CR,aAf+C,CAYjDQ,GAZiD;AAAA,UAajDC,MAbiD,GAe/CT,aAf+C,CAajDS,MAbiD;AAAA,UAcjDC,QAdiD,GAe/CV,aAf+C,CAcjDU,QAdiD;;AAiBnD;;AACA,UAAMC,gBAAgB;AACpBV,4BADoB;AAEpBI,0BAFoB;AAGpBO,oBAAYV,MAHQ;AAIpBW,yBAAiBV,WAJG;AAKpBW,uBAAeV,SALK;AAMpBW,iBAASP,GANW;AAOpBQ,oBAAYP,MAPQ;AAQpBQ,sBAAcP,QARM;AASpBJ,gCAToB;AAUpBC;AAVoB,OAAtB;;AAaA;AACA,aAAO,sBAAOI,aAAP,CAAP;AACD,K;;;;;6BAEQ;AAAA,mBACkD,KAAKO,KADvD;AAAA,UACCC,QADD,UACCA,QADD;AAAA,UACWC,SADX,UACWA,SADX;AAAA,UACsBC,KADtB,UACsBA,KADtB;AAAA,UACgCrB,aADhC;;AAEP,UAAMsB,iBAAiB,KAAKvB,uBAAL,cAAkCC,aAAlC,EAAvB;;AAEA,aACE;AAAC,kBAAD;AAAA;AACE,yBAAe,CAAC,MAAD,CADjB;AAEE,qBAAWoB,SAFb;AAGE,wBAAcE,cAHhB;AAIE,uBAAaD;AAJf;AAMGF;AANH,OADF;AAUD;;;;EApD2BI,gB;;AAAjBzB,Q,CACJ0B,W,GAAc,U","file":"GridItem.js","sourcesContent":["// @flow\nimport React, { Component } from 'react';\nimport type { Node } from 'react';\nimport { pickBy, isEmpty } from 'lodash';\n\n// components\nimport { Base } from './Base';\n\ntype Props = {\n  alignSelf?: string,\n  className?: string,\n  children?: ?Node,\n  column?: string | number,\n  columnStart?: string | number,\n  columnEnd?: string | number,\n  gridArea?: string,\n  justifySelf?: string,\n  placeSelf?: string,\n  row?: string | number,\n  rowEnd?: string | number,\n  rowStart?: string | number,\n  theme?: Object\n};\n\nexport class GridItem extends Component<Props> {\n  static displayName = 'GridItem';\n\n  _assembleInlineGridItem = (gridItemProps: Object) => {\n    // return early if gridProps are empty\n    if (isEmpty(pickBy({ ...gridItemProps }))) { return; }\n\n    const {\n      alignSelf,\n      column,\n      columnStart,\n      columnEnd,\n      gridArea,\n      justifySelf,\n      placeSelf,\n      row,\n      rowEnd,\n      rowStart\n    } = gridItemProps;\n\n    // obj with correct css grid-item class names\n    const inlineClasses = {\n      alignSelf,\n      gridArea,\n      gridColumn: column,\n      gridColumnStart: columnStart,\n      gridColumnEnd: columnEnd,\n      gridRow: row,\n      gridRowEnd: rowEnd,\n      gridRowStart: rowStart,\n      justifySelf,\n      placeSelf\n    };\n\n    // filters out keys with false(sy) values\n    return pickBy(inlineClasses);\n  }\n\n  render() {\n    const { children, className, theme, ...gridItemProps } = this.props;\n    const inlineGridItem = this._assembleInlineGridItem({ ...gridItemProps });\n\n    return (\n      <Base\n        activeClasses={['item']}\n        className={className}\n        inlineStyles={inlineGridItem}\n        stylesToAdd={theme}\n      >\n        {children}\n      </Base>\n    );\n  }\n}\n"]}