{"version":3,"sources":["../../source/components/FormField.js"],"names":["FormFieldBase","props","setError","error","setState","focusChild","inputRef","current","focus","context","themeId","theme","themeOverrides","state","composedTheme","ROOT_THEME_API","nextProps","bind","skin","rest","FormFieldSkin","skins","IDENTIFIERS","FORM_FIELD","Component","displayName","defaultProps","FormField"],"mappings":";;;;;;;;;;;AACA;;;;AAIA;;AACA;;AAGA;;;;;;;;;;;;AALA;;;AAIA;;;IAuBMA,a;;;AACJ;AASA,yBAAYC,KAAZ,EAA0B;AAAA;;AAAA,8HAClBA,KADkB;;AAAA,UAmB1BC,QAnB0B,GAmBf,UAACC,KAAD;AAAA,aAAmB,MAAKC,QAAL,CAAc,EAAED,YAAF,EAAd,CAAnB;AAAA,KAnBe;;AAAA,UAqB1BE,UArB0B,GAqBb,YAAM;AAAA,UACTC,QADS,GACI,MAAKL,KADT,CACTK,QADS;;AAEjB,UAAIA,YAAYA,SAASC,OAAzB,EAAkC;AAChC,YAAI,OAAOD,SAASC,OAAT,CAAiBC,KAAxB,KAAkC,UAAtC,EAAkDF,SAASC,OAAT,CAAiBC,KAAjB;AACnD;AACF,KA1ByB;;AAAA,QAGhBC,OAHgB,GAG4BR,KAH5B,CAGhBQ,OAHgB;AAAA,QAGPC,OAHO,GAG4BT,KAH5B,CAGPS,OAHO;AAAA,QAGEC,KAHF,GAG4BV,KAH5B,CAGEU,KAHF;AAAA,QAGSC,cAHT,GAG4BX,KAH5B,CAGSW,cAHT;;;AAKxB,UAAKC,KAAL,GAAa;AACXV,aAAO,EADI;AAEXW,qBAAe,0BACb,wBAAWH,SAASF,QAAQE,KAA5B,EAAmCD,OAAnC,CADa,EAEb,wBAAWE,cAAX,EAA2BF,OAA3B,CAFa,EAGbD,QAAQM,cAHK;AAFJ,KAAb;AALwB;AAazB;;;;8CAEyBC,S,EAAkB;AAC1C,uCAAoB,KAAKf,KAAzB,EAAgCe,SAAhC,EAA2C,KAAKZ,QAAL,CAAca,IAAd,CAAmB,IAAnB,CAA3C;AACD;;;6BAWQ;AACP;AADO,mBAUH,KAAKhB,KAVF;AAAA,UAGLiB,IAHK,UAGLA,IAHK;AAAA,UAILP,KAJK,UAILA,KAJK;AAAA,UAKLC,cALK,UAKLA,cALK;AAAA,UAMLT,KANK,UAMLA,KANK;AAAA,UAOLM,OAPK,UAOLA,OAPK;AAAA,UAQLH,QARK,UAQLA,QARK;AAAA,UASFa,IATE;;AAYP,UAAMC,gBAAgBF,QAAQT,QAAQY,KAAR,CAAcC,cAAYC,UAA1B,CAA9B;;AAEA,aACE,8BAAC,aAAD;AACE,eAAOpB,SAAS,KAAKU,KAAL,CAAWV,KAD7B;AAEE,kBAAU,KAAKD,QAFjB;AAGE,eAAO,KAAKW,KAAL,CAAWC,aAHpB;AAIE,oBAAY,KAAKT;AAJnB,SAKMc,IALN,EADF;AASD;;;;EA7DyBK,gB;;AAAtBxB,a,CAEGyB,W,GAAc,W;AAFjBzB,a,CAGG0B,Y,GAAe;AACpBjB,WAAS,oCADW;AAEpBE,SAAO,IAFa;AAGpBD,WAASY,cAAYC,UAHD;AAIpBX,kBAAgB;AAJI,C;AA6DjB,IAAMe,gCAAY,0BAAU3B,aAAV,CAAlB","file":"FormField.js","sourcesContent":["// @flow\nimport React, { Component } from 'react';\nimport type { ElementRef, ComponentType, Element } from 'react';\n\n// internal utility functions\nimport { createEmptyContext, withTheme } from './HOC/withTheme';\nimport { composeTheme, addThemeId, didThemePropsChange } from '../utils/themes';\n\n// import constants\nimport { IDENTIFIERS } from '.';\nimport type { ThemeContextProp } from './HOC/withTheme';\n\ntype Props = {\n  className?: ?string,\n  context: ThemeContextProp,\n  disabled?: boolean,\n  error?: string | Element<any>,\n  inputRef?: ElementRef<*>,\n  label?: string | Element<any>,\n  render: Function,\n  skin?: ComponentType<any>,\n  theme: ?Object, // will take precedence over theme in context if passed\n  themeId: string,\n  themeOverrides: Object\n};\n\ntype State = {\n  error: string,\n  composedTheme: Object\n};\n\nclass FormFieldBase extends Component<Props, State> {\n  // define static properties\n  static displayName = 'FormField';\n  static defaultProps = {\n    context: createEmptyContext(),\n    theme: null,\n    themeId: IDENTIFIERS.FORM_FIELD,\n    themeOverrides: {}\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    const { context, themeId, theme, themeOverrides } = props;\n\n    this.state = {\n      error: '',\n      composedTheme: composeTheme(\n        addThemeId(theme || context.theme, themeId),\n        addThemeId(themeOverrides, themeId),\n        context.ROOT_THEME_API\n      )\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    didThemePropsChange(this.props, nextProps, this.setState.bind(this));\n  }\n\n  setError = (error: string) => this.setState({ error });\n\n  focusChild = () => {\n    const { inputRef } = this.props;\n    if (inputRef && inputRef.current) {\n      if (typeof inputRef.current.focus === 'function') inputRef.current.focus();\n    }\n  };\n\n  render() {\n    // destructuring props ensures only the \"...rest\" get passed down\n    const {\n      skin,\n      theme,\n      themeOverrides,\n      error,\n      context,\n      inputRef,\n      ...rest\n    } = this.props;\n\n    const FormFieldSkin = skin || context.skins[IDENTIFIERS.FORM_FIELD];\n\n    return (\n      <FormFieldSkin\n        error={error || this.state.error}\n        setError={this.setError}\n        theme={this.state.composedTheme}\n        focusChild={this.focusChild}\n        {...rest}\n      />\n    );\n  }\n}\n\nexport const FormField = withTheme(FormFieldBase);\n"]}