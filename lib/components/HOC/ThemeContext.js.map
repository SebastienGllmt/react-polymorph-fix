{"version":3,"sources":["../../../source/components/HOC/ThemeContext.js"],"names":["createContext","React","createReactContext","defaultContext","skins","theme","ROOT_THEME_API","ThemeContext"],"mappings":";;;;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAIA,sBAAJ;;AACA,IAAIC,gBAAMD,aAAV,EAAyB;AACvB;AACAA,kBAAgBC,gBAAMD,aAAtB;AACD,CAHD,MAGO;AACL;AACAA,kBAAgBE,4BAAhB;AACD;;AAQD,IAAMC,iBAAiB;AACrBC,SAAO,EADc;AAErBC,SAAOC,mBAFc;AAGrBA;AAHqB,CAAvB;;AAMO,IAAMC,sCAA+BP,cAAcG,cAAd,CAArC","file":"ThemeContext.js","sourcesContent":["// @flow\nimport React from 'react';\nimport createReactContext, { type Context } from 'create-react-context';\nimport { ROOT_THEME_API } from '../../themes/API';\n\n// components that are NOT directly nested within a ThemeProvider\n// can access simple theme as \"this.props.context.theme\",\n// same goes for \"this.props.context.ROOT_THEME_API\"\n// if the user passes ThemeProvider a theme and/or ROOT_THEME_API,\n// these default values are overwritten\n\n// check to use context pollyfill or not\nlet createContext;\nif (React.createContext) {\n  // React module contains createContext method, no polyfill\n  createContext = React.createContext;\n} else {\n  // use create-react-context polyfill\n  createContext = createReactContext;\n}\n\ntype Theme = {\n  skins: Object,\n  theme: Object,\n  ROOT_THEME_API: Object\n};\n\nconst defaultContext = {\n  skins: {},\n  theme: ROOT_THEME_API,\n  ROOT_THEME_API\n};\n\nexport const ThemeContext: Context<Theme> = createContext(defaultContext);\n"]}