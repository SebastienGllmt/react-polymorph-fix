{"version":3,"sources":["../../source/components/ThemeProvider.js"],"names":["ThemeProvider","props","theme","themeOverrides","state","_composeLibraryTheme","nextProps","nextTheme","nextOverrides","setState","skins","providerState","ROOT_THEME_API","children","Component","displayName","defaultProps","composedTheme","componentName","_applyThemeOverrides","componentTheme","componentThemeOverrides","componentThemeAPI","composedComponentTheme","className"],"mappings":"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","file":"ThemeProvider.js","sourcesContent":["// @flow\nimport React, { Component } from 'react';\nimport type { Node } from 'react';\n\n// external libraries\nimport { isEmpty, isEqual, cloneDeep } from 'lodash';\n\n// contains default theme and context provider\nimport { ThemeContext } from './HOC/ThemeContext';\n\n// imports the Root Theme API object which specifies the shape\n// of a complete theme for every component in this library, used in this.composeLibraryTheme\nimport { ROOT_THEME_API } from '../themes/API';\n\n// internal utility functions\nimport { appendToProperty } from '../utils/themes';\nimport { hasProperty } from '../utils/props';\n\ntype Props = {\n  children?: ?Node,\n  skins: Object,\n  theme: Object,\n  themeOverrides: Object // custom css/scss from user that adheres to shape of ROOT_THEME_API\n};\n\ntype State = {\n  theme: Object,\n};\n\nexport class ThemeProvider extends Component<Props, State> {\n  // define static properties\n  static displayName = 'ThemeProvider';\n  static defaultProps = {\n    skins: {},\n    theme: {},\n    themeOverrides: {}\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    const { theme, themeOverrides } = props;\n\n    this.state = {\n      theme: this._composeLibraryTheme(theme, themeOverrides)\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    const { theme, themeOverrides } = this.props;\n    const { theme: nextTheme, themeOverrides: nextOverrides } = nextProps;\n\n    if (!isEqual(theme, nextTheme) || !isEqual(themeOverrides, nextOverrides)) {\n      this.setState(() => ({\n        theme: this._composeLibraryTheme(nextTheme, nextOverrides)\n      }));\n    }\n  }\n\n  // composeLibraryTheme returns a single obj containing theme definitions\n  // for every component in the library. Every key on the returned obj is named\n  // in conjunction with a component in the library and each key's value is structured\n  // to contain the css definitions for each element in that component.\n  // Which is just a string via CSS-Modules. Looks like this:\n  // {\n  //   button: { root: '', disabled: '' },\n  //   input: { input: '', disabled: '', error: '' },\n  //   formField: { root: '', label: '', error: '' },\n  //   ... and so on, creating a complete theme for the library,\n  //  }\n  _composeLibraryTheme = (theme: Object, themeOverrides: Object) => {\n    // if themeOverrides is empty, no need for composition\n    if (isEmpty(themeOverrides)) { return theme; }\n\n    // final object to be returned\n    const composedTheme = {};\n\n    for (const componentName in ROOT_THEME_API) {\n      // check if ROOT_THEME_API contains the key of componentName\n      if (hasProperty(ROOT_THEME_API, componentName)) {\n\n        // check if theme contains a key of componentName\n        if (hasProperty(theme, componentName)) {\n          // add componentName as a key to final return obj\n          composedTheme[componentName] = theme[componentName];\n        }\n\n        // also check if themeOverrides contains the key componentName\n        if (hasProperty(themeOverrides, componentName)) {\n          // compose theme styles with user's themeOverrides\n          composedTheme[componentName] = this._applyThemeOverrides(\n            theme[componentName],\n            themeOverrides[componentName],\n            ROOT_THEME_API[componentName]\n          );\n        }\n      }\n    }\n    return composedTheme;\n  };\n\n  _applyThemeOverrides = (\n    componentTheme: Object,\n    componentThemeOverrides: Object,\n    componentThemeAPI: Object\n  ) => {\n    // Return componentTheme if there are no overrides provided\n    if (isEmpty(componentThemeOverrides)) { return componentTheme; }\n\n    // final composed theme obj to be returned at end\n    const composedComponentTheme = cloneDeep(componentThemeAPI);\n\n    for (const className in componentThemeAPI) {\n      if (hasProperty(componentThemeAPI, className)) {\n        if (hasProperty(componentTheme, className)) {\n          appendToProperty(composedComponentTheme, className, componentTheme[className]);\n        }\n\n        if (hasProperty(componentThemeOverrides, className)) {\n          appendToProperty(composedComponentTheme, className, componentThemeOverrides[className]);\n        }\n      }\n    }\n    return composedComponentTheme;\n  }\n\n  render() {\n    const { theme } = this.state;\n    const { skins } = this.props;\n    const providerState = { skins, theme, ROOT_THEME_API };\n\n    return (\n      <ThemeContext.Provider value={providerState}>\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n"]}