{"version":3,"sources":["../../source/components/TextArea.js"],"names":["TextAreaBase","props","focus","textareaElement","current","onChange","event","disabled","_processValue","target","value","_setError","error","setState","context","themeId","theme","themeOverrides","state","composedTheme","ROOT_THEME_API","autoResize","autoFocus","window","addEventListener","_handleAutoresize","nextProps","removeEventListener","bind","_enforceStringValue","_enforceMaxLength","_enforceMinLength","call","Error","maxLength","isTooLong","length","substring","minLength","isTooShort","style","getComputedStyle","heightOffset","boxSizing","parseFloat","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","height","scrollHeight","skin","rest","TextAreaSkin","skins","IDENTIFIERS","TEXT_AREA","Component","displayName","defaultProps","TextArea"],"mappings":"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","file":"TextArea.js","sourcesContent":["// @flow\nimport React, { Component } from 'react';\nimport type { ComponentType, Node, Element } from 'react';\n\n// external libraries\nimport createRef from 'create-react-ref/lib/createRef';\nimport { isString, flow } from 'lodash';\n\n// internal utility functions\nimport { createEmptyContext, withTheme } from './HOC/withTheme';\nimport { composeTheme, addThemeId, didThemePropsChange } from '../utils/themes';\n\n// import constants\nimport { IDENTIFIERS } from '.';\nimport type { ThemeContextProp } from './HOC/withTheme';\n\ntype Props = {\n  autoFocus: boolean,\n  autoResize: boolean,\n  className?: string,\n  context: ThemeContextProp,\n  disabled?: boolean,\n  label?: string | Element<any>,\n  error?: string | Node,\n  maxLength?: number,\n  minLength?: number,\n  onBlur?: Function,\n  onChange?: Function,\n  onFocus?: Function,\n  placeholder?: string,\n  rows?: number,\n  skin?: ComponentType<any>,\n  theme: ?Object, // will take precedence over theme in context if passed\n  themeId: string,\n  themeOverrides: Object,\n  value: string\n};\n\ntype State = {\n  error: string,\n  composedTheme: Object\n};\n\nclass TextAreaBase extends Component<Props, State> {\n  // declare ref types\n  textareaElement: Element<'textarea'>;\n\n  // define static properties\n  static displayName = 'TextArea';\n  static defaultProps = {\n    autoFocus: false,\n    autoResize: true,\n    context: createEmptyContext(),\n    theme: null,\n    themeId: IDENTIFIERS.TEXT_AREA,\n    themeOverrides: {},\n    value: ''\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    // define ref\n    this.textareaElement = createRef();\n\n    const { context, themeId, theme, themeOverrides } = props;\n\n    this.state = {\n      composedTheme: composeTheme(\n        addThemeId(theme || context.theme, themeId),\n        addThemeId(themeOverrides, themeId),\n        context.ROOT_THEME_API\n      ),\n      error: ''\n    };\n  }\n\n  componentDidMount() {\n    const { autoResize, autoFocus } = this.props;\n\n    if (autoResize) {\n      window.addEventListener('resize', this._handleAutoresize);\n      this._handleAutoresize();\n    }\n\n    if (autoFocus) { this.focus(); }\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (!this.props.autoResize && nextProps.autoResize) {\n      window.addEventListener('resize', this._handleAutoresize);\n    } else if (this.props.autoResize && !nextProps.autoResize) {\n      window.removeEventListener('resize', this._handleAutoresize);\n    }\n\n    didThemePropsChange(this.props, nextProps, this.setState.bind(this));\n  }\n\n  componentDidUpdate() {\n    if (this.props.autoResize) this._handleAutoresize();\n  }\n\n  componentWillUnmount() {\n    if (this.props.autoResize) {\n      window.removeEventListener('resize', this._handleAutoresize);\n    }\n  }\n\n  focus = () => {\n    const { textareaElement } = this;\n    if (!textareaElement.current) return;\n    textareaElement.current.focus();\n  };\n\n  onChange = (event: SyntheticInputEvent<>) => {\n    const { onChange, disabled } = this.props;\n    if (disabled) return;\n\n    if (onChange) onChange(this._processValue(event.target.value), event);\n  };\n\n  _setError = (error: string) => this.setState({ error });\n\n  _processValue(value: string) {\n    return flow([\n      this._enforceStringValue,\n      this._enforceMaxLength,\n      this._enforceMinLength\n    ]).call(this, value);\n  }\n\n  _enforceStringValue(value: string) {\n    if (!isString(value)) {\n      throw new Error('Values passed to TextArea::onChange must be strings');\n    }\n    return value;\n  }\n\n  _enforceMaxLength(value: string) {\n    const { maxLength } = this.props;\n    const isTooLong = maxLength != null && value.length > maxLength;\n    return isTooLong ? value.substring(0, maxLength) : value;\n  }\n\n  _enforceMinLength(value: string) {\n    const { minLength } = this.props;\n    const isTooShort = minLength != null && value.length < minLength;\n\n    if (isTooShort) {\n      this._setError('Please enter a valid input');\n    } else if (this.state.error !== '') {\n      this._setError('');\n    }\n\n    return value;\n  }\n\n  _handleAutoresize() {\n    const { textareaElement } = this;\n\n    if (!textareaElement.current) return;\n\n    // compute the height difference between inner height and outer height\n    const style = getComputedStyle(textareaElement.current, '');\n    const heightOffset =\n      style.boxSizing === 'content-box'\n        ? -(parseFloat(style.paddingTop) + parseFloat(style.paddingBottom))\n        : parseFloat(style.borderTopWidth) +\n          parseFloat(style.borderBottomWidth);\n\n    // resize the input to its content size\n    textareaElement.current.style.height = 'auto';\n    textareaElement.current.style.height = `${textareaElement.current.scrollHeight +\n      heightOffset}px`;\n  }\n\n  render() {\n    // destructuring props ensures only the \"...rest\" get passed down\n    const {\n      skin,\n      theme,\n      themeOverrides,\n      onChange,\n      error,\n      context,\n      autoFocus,\n      autoResize,\n      ...rest\n    } = this.props;\n\n    const TextAreaSkin = skin || context.skins[IDENTIFIERS.TEXT_AREA];\n\n    return (\n      <TextAreaSkin\n        error={error || this.state.error}\n        onChange={this.onChange}\n        textareaRef={this.textareaElement}\n        theme={this.state.composedTheme}\n        {...rest}\n      />\n    );\n  }\n}\n\nexport const TextArea = withTheme(TextAreaBase);\n"]}