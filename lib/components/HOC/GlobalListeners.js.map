{"version":3,"sources":["../../../source/components/HOC/GlobalListeners.js"],"names":["GlobalListeners","props","_removeListenersAndToggle","optionsIsOpen","optionsRef","_removeGlobalListeners","current","toggleOpen","_getDocumentListeners","click","_handleDocumentClick","scroll","_handleDocumentScroll","_getWindowListeners","resize","_handleWindowResize","event","rootRef","_addCalculateMaxHeightListeners","scrollListener","_calculateOptionsMaxHeight","leading","resizeListener","addEventListener","document","documentElement","optionsIsOpeningUpward","mouseIsOverOptions","style","getBoundingClientRect","height","top","window","innerHeight","setState","optionsMaxHeight","state","nextProps","children","Component","displayName","defaultProps"],"mappings":"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","file":"GlobalListeners.js","sourcesContent":["// @flow\nimport React, { Component } from 'react';\n// $FlowFixMe\nimport type { SyntheticMouseEvent, ElementRef } from 'react';\nimport { debounce } from 'lodash';\n\nimport {\n  addDocumentListeners,\n  addWindowListeners,\n  removeDocumentListeners,\n  removeWindowListeners,\n  targetIsDescendant\n} from '../../utils/events';\n\ntype Props = {\n  children: Function,\n  mouseIsOverOptions: boolean,\n  optionsIsOpen: boolean,\n  optionsIsOpeningUpward: boolean,\n  optionsRef?: ElementRef<*>,\n  rootRef?: ElementRef<*>,\n  toggleOpen: Function\n};\n\ntype State = {\n  optionsMaxHeight: number\n};\n\nexport class GlobalListeners extends Component<Props, State> {\n  // define static properties\n  static displayName = 'GlobalListeners';\n  static defaultProps = {\n    optionsIsOpen: false\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      optionsMaxHeight: 300\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.optionsIsOpen) { return; }\n    // adds scroll and resize event listeners for calculating Options max-height\n    this._addCalculateMaxHeightListeners();\n    // runs initial Options max-height calculation\n    this._calculateOptionsMaxHeight();\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    const { optionsIsOpen } = this.props;\n\n    // if Options is transferring from closed to open, add listeners\n    // if Options is transferring from open to closed, remove listeners\n    if (!optionsIsOpen && nextProps.optionsIsOpen) {\n      // first remove max-height calc handler on scroll and resize\n      // then add toggle handler on scroll and resize\n      this._removeGlobalListeners();\n      addWindowListeners(this._getWindowListeners());\n      addDocumentListeners(this._getDocumentListeners());\n\n    } else if (optionsIsOpen && !nextProps.optionsIsOpen) {\n      // remove toggle handler on scroll and resize\n      // then add calc max-height calc handler on scroll and resize\n      this._removeGlobalListeners();\n      this._addCalculateMaxHeightListeners();\n    }\n  }\n\n  // before unmounting, remove all global listeners\n  componentWillUnmount() {\n    this._removeGlobalListeners();\n  }\n\n  // removes all event listeners from document and window\n  _removeGlobalListeners() {\n    removeDocumentListeners(this._getDocumentListeners());\n    removeWindowListeners(this._getWindowListeners());\n  }\n\n  // removes all global listeners, then closes Options\n  _removeListenersAndToggle = () => {\n    const { optionsIsOpen, optionsRef } = this.props;\n    this._removeGlobalListeners();\n\n    // before toggle, ensure options is open and optionsRef exists on DOM\n    if (!optionsIsOpen || !optionsRef || !optionsRef.current) { return; }\n    this.props.toggleOpen();\n  }\n\n  _getDocumentListeners = () => ({\n    click: this._handleDocumentClick,\n    scroll: this._handleDocumentScroll\n  });\n\n  _getWindowListeners = () => ({\n    resize: this._handleWindowResize\n  });\n\n  _handleDocumentClick = (event: SyntheticMouseEvent<>) => {\n    const { optionsIsOpen, rootRef } = this.props;\n\n    // ensure Options is open\n    if (!optionsIsOpen || !rootRef || !rootRef.current) { return; }\n\n    // return early if the user clicked an element within the parent component\n    // for example, the parent component could be Autocomplete or Select\n    if (targetIsDescendant(event, rootRef.current)) { return; }\n\n    // otherwise, remove all listeners and close Options\n    this._removeListenersAndToggle();\n  };\n\n  _handleWindowResize = () => this._removeListenersAndToggle();\n\n  _handleDocumentScroll = () => this._removeListenersAndToggle();\n\n  _addCalculateMaxHeightListeners = () => {\n    const scrollListener = ['scroll', debounce(this._calculateOptionsMaxHeight, 300, { leading: true }), true];\n    const resizeListener = ['resize', debounce(this._calculateOptionsMaxHeight, 300)];\n    document.addEventListener(...scrollListener);\n    window.addEventListener(...resizeListener);\n  }\n\n  // calculates max-height for Options, max-height shouldn't be greater than distance\n  // from Options rootRef to edge of window (up or down) else Options run off page\n  _calculateOptionsMaxHeight = () => {\n    const { documentElement } = document;\n    const {\n      rootRef,\n      optionsIsOpeningUpward,\n      optionsIsOpen,\n      toggleOpen,\n      mouseIsOverOptions,\n    } = this.props;\n\n    // checks if Options are open & being scrolled upon via mouse position prior to toggling closed\n    optionsIsOpen && !mouseIsOverOptions && toggleOpen();\n\n    if (!documentElement || !documentElement.style || !rootRef || !rootRef.current) {\n      return;\n    }\n\n    const { height, top } = rootRef.current.getBoundingClientRect();\n    // opening upwards case\n    if (optionsIsOpeningUpward && top < window.innerHeight) {\n      this.setState({ optionsMaxHeight: top - 20 });\n      return;\n    }\n\n    // opening downwards case\n    const optionsMaxHeight = window.innerHeight - top - height - 30;\n    if (!optionsIsOpeningUpward && optionsMaxHeight > 0) {\n      this.setState({ optionsMaxHeight });\n    }\n  }\n\n  render() {\n    const { optionsMaxHeight } = this.state;\n    return <div>{this.props.children({ optionsMaxHeight })}</div>;\n  }\n}\n"]}