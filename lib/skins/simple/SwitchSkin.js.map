{"version":3,"sources":["../../../source/skins/simple/SwitchSkin.js"],"names":["SwitchSkin","props","theme","themeId","className","root","disabled","checked","onChange","event","input","switch","thumb","label"],"mappings":";;;;;;;;;AAIA;;;AAGA;;;AANA;;;;AAIA;;;;AAGA;;;;AAYO,IAAMA,kCAAa,SAAbA,UAAa,CAACC,KAAD,EAAkB;AAAA,MAClCC,KADkC,GACfD,KADe,CAClCC,KADkC;AAAA,MAC3BC,OAD2B,GACfF,KADe,CAC3BE,OAD2B;;AAE1C,SACE;AAAA;AAAA;AACE,YAAK,cADP;AAEE,yBAFF;AAGE,iBAAW,0BAAW,CACpBF,MAAMG,SADc,EAEpBF,MAAMC,OAAN,EAAeE,IAFK,EAGpBJ,MAAMK,QAAN,GAAiBJ,MAAMC,OAAN,EAAeG,QAAhC,GAA2C,IAHvB,EAIpBL,MAAMM,OAAN,GAAgBL,MAAMC,OAAN,EAAeI,OAA/B,GAAyC,IAJrB,CAAX,CAHb;AASE,eAAS,wBAAS;AAChB,YAAI,CAACN,MAAMK,QAAP,IAAmBL,MAAMO,QAA7B,EAAuC;AACrCP,gBAAMO,QAAN,CAAe,CAACP,MAAMM,OAAtB,EAA+BE,KAA/B;AACD;AACF;AAbH;AAeE,wDACM,yBAAaR,KAAb,CADN;AAEE,iBAAWC,MAAMC,OAAN,EAAeO,KAF5B;AAGE,oBAHF;AAIE,YAAK;AAJP,OAfF;AAqBE;AAAA;AAAA;AACE,mBAAW,0BAAW,CACpBR,MAAMC,OAAN,EAAeQ,MADK,EAEpBV,MAAMM,OAAN,GAAgBL,MAAMC,OAAN,EAAeI,OAA/B,GAAyC,IAFrB,CAAX;AADb;AAME,8CAAM,WAAWL,MAAMC,OAAN,EAAeS,KAAhC;AANF,KArBF;AA6BGX,UAAMY,KAAN,GACC;AAAA;AAAA,QAAO,WAAWX,MAAMC,OAAN,EAAeU,KAAjC;AAAyCZ,YAAMY;AAA/C,KADD,GAEG;AA/BN,GADF;AAmCD,CArCM","file":"SwitchSkin.js","sourcesContent":["// @flow\nimport React from 'react';\nimport type { Element } from 'react';\n\n// external libraries\nimport classnames from 'classnames';\n\n// internal utility functions\nimport { pickDOMProps } from '../../utils/props';\n\ntype Props = {\n  checked: boolean,\n  className: string,\n  disabled: boolean,\n  onChange: Function,\n  label: string | Element<any>,\n  theme: Object,\n  themeId: string\n};\n\nexport const SwitchSkin = (props: Props) => {\n  const { theme, themeId } = props;\n  return (\n    <div\n      role=\"presentation\"\n      aria-hidden\n      className={classnames([\n        props.className,\n        theme[themeId].root,\n        props.disabled ? theme[themeId].disabled : null,\n        props.checked ? theme[themeId].checked : null\n      ])}\n      onClick={event => {\n        if (!props.disabled && props.onChange) {\n          props.onChange(!props.checked, event);\n        }\n      }}\n    >\n      <input\n        {...pickDOMProps(props)}\n        className={theme[themeId].input}\n        readOnly\n        type=\"checkbox\"\n      />\n      <div\n        className={classnames([\n          theme[themeId].switch,\n          props.checked ? theme[themeId].checked : null\n        ])}\n      >\n        <span className={theme[themeId].thumb} />\n      </div>\n      {props.label ? (\n        <label className={theme[themeId].label}>{props.label}</label>\n      ) : null}\n    </div>\n  );\n};\n"]}