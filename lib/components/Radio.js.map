{"version":3,"sources":["../../source/components/Radio.js"],"names":["RadioBase","props","context","themeId","theme","themeOverrides","state","composedTheme","ROOT_THEME_API","nextProps","setState","bind","skin","rest","RadioSkin","skins","IDENTIFIERS","RADIO","Component","displayName","defaultProps","selected","Radio"],"mappings":";;;;;;;;;;;AACA;;;;AAIA;;AACA;;AAGA;;;;;;;;;;;;AALA;;;AAIA;;;IAsBMA,S;;;AACJ;AAUA,qBAAYC,KAAZ,EAA0B;AAAA;;AAAA,sHAClBA,KADkB;;AAAA,QAGhBC,OAHgB,GAG4BD,KAH5B,CAGhBC,OAHgB;AAAA,QAGPC,OAHO,GAG4BF,KAH5B,CAGPE,OAHO;AAAA,QAGEC,KAHF,GAG4BH,KAH5B,CAGEG,KAHF;AAAA,QAGSC,cAHT,GAG4BJ,KAH5B,CAGSI,cAHT;;;AAKxB,UAAKC,KAAL,GAAa;AACXC,qBAAe,0BACb,wBAAWH,SAASF,QAAQE,KAA5B,EAAmCD,OAAnC,CADa,EAEb,wBAAWE,cAAX,EAA2BF,OAA3B,CAFa,EAGbD,QAAQM,cAHK;AADJ,KAAb;AALwB;AAYzB;;;;8CAEyBC,S,EAAkB;AAC1C,uCAAoB,KAAKR,KAAzB,EAAgCQ,SAAhC,EAA2C,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAA3C;AACD;;;6BAEQ;AACP;AADO,mBAQH,KAAKV,KARF;AAAA,UAGLW,IAHK,UAGLA,IAHK;AAAA,UAILR,KAJK,UAILA,KAJK;AAAA,UAKLC,cALK,UAKLA,cALK;AAAA,UAMLH,OANK,UAMLA,OANK;AAAA,UAOFW,IAPE;;AAUP,UAAMC,YAAYF,QAAQV,QAAQa,KAAR,CAAcC,cAAYC,KAA1B,CAA1B;;AAEA,aAAO,8BAAC,SAAD,aAAW,OAAO,KAAKX,KAAL,CAAWC,aAA7B,IAAgDM,IAAhD,EAAP;AACD;;;;EA1CqBK,gB;;AAAlBlB,S,CAEGmB,W,GAAc,O;AAFjBnB,S,CAGGoB,Y,GAAe;AACpBlB,WAAS,oCADW;AAEpBmB,YAAU,KAFU;AAGpBjB,SAAO,IAHa;AAIpBD,WAASa,cAAYC,KAJD;AAKpBZ,kBAAgB;AALI,C;AA0CjB,IAAMiB,wBAAQ,0BAAUtB,SAAV,CAAd","file":"Radio.js","sourcesContent":["// @flow\nimport React, { Component } from 'react';\nimport type { ComponentType, Element } from 'react';\n\n// internal utility functions\nimport { createEmptyContext, withTheme } from './HOC/withTheme';\nimport { composeTheme, addThemeId, didThemePropsChange } from '../utils/themes';\n\n// import constants\nimport { IDENTIFIERS } from '.';\nimport type { ThemeContextProp } from './HOC/withTheme';\n\ntype Props = {\n  context: ThemeContextProp,\n  disabled?: boolean,\n  label?: string | Element<any>,\n  onBlur?: Function,\n  onChange?: Function,\n  onFocus?: Function,\n  selected: boolean,\n  skin?: ComponentType<any>,\n  theme: ?Object, // will take precedence over theme in context if passed\n  themeId: string,\n  themeOverrides: Object\n};\n\ntype State = {\n  composedTheme: Object\n};\n\nclass RadioBase extends Component<Props, State> {\n  // define static properties\n  static displayName = 'Radio';\n  static defaultProps = {\n    context: createEmptyContext(),\n    selected: false,\n    theme: null,\n    themeId: IDENTIFIERS.RADIO,\n    themeOverrides: {}\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    const { context, themeId, theme, themeOverrides } = props;\n\n    this.state = {\n      composedTheme: composeTheme(\n        addThemeId(theme || context.theme, themeId),\n        addThemeId(themeOverrides, themeId),\n        context.ROOT_THEME_API\n      )\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    didThemePropsChange(this.props, nextProps, this.setState.bind(this));\n  }\n\n  render() {\n    // destructuring props ensures only the \"...rest\" get passed down\n    const {\n      skin,\n      theme,\n      themeOverrides,\n      context,\n      ...rest\n    } = this.props;\n\n    const RadioSkin = skin || context.skins[IDENTIFIERS.RADIO];\n\n    return <RadioSkin theme={this.state.composedTheme} {...rest} />;\n  }\n}\n\nexport const Radio = withTheme(RadioBase);\n"]}