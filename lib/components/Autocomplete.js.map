{"version":3,"sources":["../../source/components/Autocomplete.js"],"names":["AutocompleteBase","props","rootElement","inputElement","suggestionsElement","optionsElement","context","themeId","theme","themeOverrides","sortAlphabetically","options","preselectedOptions","state","inputValue","error","selectedOptions","filteredOptions","sort","isOpen","mouseIsOverOptions","composedTheme","ROOT_THEME_API","nextProps","setState","bind","invalidCharsRegex","multipleSameSelections","skin","onChange","rest","AutocompleteSkin","skins","IDENTIFIERS","AUTOCOMPLETE","isOpeningUpward","toggleOpen","optionsMaxHeight","getSelectionProps","handleAutocompleteClick","handleChange","handleInputChange","onKeyDown","removeOption","toggleMouseLocation","Component","displayName","defaultProps","maxVisibleOptions","clear","_removeOptions","focus","open","close","current","scrollTop","event","keyCode","target","value","length","stopPropagation","_setInputValue","option","updateSelectedOptions","selectedOption","maxSelections","canMoreOptionsBeSelected","areFilteredOptionsAvailable","trim","optionCanBeSelected","indexOf","newSelectedOptions","selectionChanged","index","removeSelection","_filterOptions","push","_filterInvalidChars","filteredValue","test","replace","Autocomplete"],"mappings":"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","file":"Autocomplete.js","sourcesContent":["// @flow\nimport React, { Component } from 'react';\nimport type { ComponentType, Element } from 'react';\n\n// external libraries\nimport createRef from 'create-react-ref/lib/createRef';\nimport _ from 'lodash';\n\n// interal components\nimport { GlobalListeners } from './HOC/GlobalListeners';\n\n// internal utility functions\nimport { createEmptyContext, withTheme } from './HOC/withTheme';\nimport { composeTheme, addThemeId, didThemePropsChange } from '../utils/themes';\nimport { composeFunctions } from '../utils/props';\n\nimport { IDENTIFIERS } from '.';\nimport type { ThemeContextProp } from './HOC/withTheme';\n\ntype Props = {\n  className?: string,\n  context: ThemeContextProp,\n  error: ?string,\n  invalidCharsRegex: RegExp,\n  isOpeningUpward: boolean,\n  label?: string | Element<any>,\n  maxSelections?: number,\n  maxVisibleOptions: number,\n  multipleSameSelections: boolean,\n  onChange?: Function,\n  options: Array<any>,\n  preselectedOptions?: Array<any>,\n  placeholder?: string,\n  renderSelections?: Function,\n  renderOptions?: Function,\n  skin?: ComponentType<any>,\n  sortAlphabetically: boolean,\n  theme: ?Object, // will take precedence over theme in context if passed\n  themeId: string,\n  themeOverrides: Object\n};\n\ntype State = {\n  composedTheme: Object,\n  error: string,\n  filteredOptions: Array<any>,\n  isOpen: boolean,\n  inputValue: string,\n  mouseIsOverOptions: boolean,\n  selectedOptions: Array<any>,\n};\n\nclass AutocompleteBase extends Component<Props, State> {\n  // declare ref types\n  rootElement: ?Element<any>;\n  inputElement: ?Element<'input'>;\n  suggestionsElement: ?Element<any>;\n  optionsElement: ?Element<any>;\n\n  // define static properties\n  static displayName = 'Autocomplete';\n  static defaultProps = {\n    context: createEmptyContext(),\n    error: null,\n    invalidCharsRegex: /[^a-zA-Z0-9]/g, // only allow letters and numbers by default\n    isOpeningUpward: false,\n    maxVisibleOptions: 10, // max number of visible options\n    multipleSameSelections: true, // if true then same word can be selected multiple times\n    options: [],\n    sortAlphabetically: true, // options are sorted alphabetically by default\n    theme: null,\n    themeId: IDENTIFIERS.AUTOCOMPLETE,\n    themeOverrides: {}\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    // define refs\n    this.rootElement = createRef();\n    this.inputElement = createRef();\n    this.suggestionsElement = createRef();\n    this.optionsElement = createRef();\n\n    const {\n      context,\n      themeId,\n      theme,\n      themeOverrides,\n      sortAlphabetically,\n      options,\n      preselectedOptions\n    } = props;\n\n    this.state = {\n      inputValue: '',\n      error: '',\n      selectedOptions: preselectedOptions || [],\n      filteredOptions:\n        sortAlphabetically && options ? options.sort() : options || [],\n      isOpen: false,\n      mouseIsOverOptions: false,\n      composedTheme: composeTheme(\n        addThemeId(theme || context.theme, themeId),\n        addThemeId(themeOverrides, themeId),\n        context.ROOT_THEME_API\n      )\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    didThemePropsChange(this.props, nextProps, this.setState.bind(this));\n  }\n\n  clear = () => this._removeOptions();\n\n  focus = () => this.handleAutocompleteClick();\n\n  open = () => this.setState({ isOpen: true });\n\n  close = () => this.setState({ isOpen: false });\n\n  toggleOpen = () => {\n    if (this.state.isOpen && this.optionsElement && this.optionsElement.current) {\n      // set Options scroll position to top on close\n      this.optionsElement.current.scrollTop = 0;\n    }\n    this.setState({ isOpen: !this.state.isOpen });\n  }\n\n  toggleMouseLocation = () => (\n    this.setState({ mouseIsOverOptions: !this.state.mouseIsOverOptions })\n  );\n\n  handleAutocompleteClick = () => {\n    const { inputElement } = this;\n    if (inputElement && inputElement.current) {\n      inputElement.current.focus();\n    }\n    // toggle options open/closed\n    this.toggleOpen();\n  };\n\n  onKeyDown = (event: SyntheticKeyboardEvent<>) => {\n\n    if ( // Check for backspace in order to delete the last selected option\n      event.keyCode === 8 &&\n      !event.target.value &&\n      this.state.selectedOptions.length\n    ) {\n      // Remove last selected option\n      this.removeOption(this.state.selectedOptions.length - 1, event);\n    } else if (event.keyCode === 27) { // ESCAPE key: Stops propagation & modal closing\n      event.stopPropagation();\n    } else if (event.keyCode === 13) { // ENTER key: Opens suggestions\n      this.open();\n    }\n  };\n\n  // onChange handler for input element in AutocompleteSkin\n  handleInputChange = (event: SyntheticInputEvent<HTMLInputElement>) => {\n    this._setInputValue(event.target.value);\n  };\n\n  // passed to Options onChange handler in AutocompleteSkin\n  handleChange = (option: any, event: SyntheticEvent<>) => {\n    this.updateSelectedOptions(event, option);\n  };\n\n  updateSelectedOptions = (\n    event: SyntheticEvent<>,\n    selectedOption: any = null\n  ) => {\n    const { maxSelections, multipleSameSelections } = this.props;\n    const { selectedOptions, filteredOptions, isOpen } = this.state;\n    const canMoreOptionsBeSelected = (\n      maxSelections != null ? selectedOptions.length < maxSelections : true\n    );\n    const areFilteredOptionsAvailable = filteredOptions && filteredOptions.length > 0;\n\n    if (!maxSelections || (canMoreOptionsBeSelected && areFilteredOptionsAvailable)) {\n      if (!selectedOption) return;\n      const option = selectedOption.trim();\n      const optionCanBeSelected = (\n        (selectedOptions.indexOf(option) < 0 && !multipleSameSelections) ||\n        multipleSameSelections\n      );\n\n      if (option && optionCanBeSelected && isOpen) {\n        const newSelectedOptions = _.concat(selectedOptions, option);\n        this.selectionChanged(newSelectedOptions, event);\n        this.setState({ selectedOptions: newSelectedOptions, isOpen: false });\n      }\n    }\n\n    this._setInputValue('');\n  };\n\n  removeOption = (index: number, event: SyntheticEvent<>) => {\n    const selectedOptions = this.state.selectedOptions;\n    _.pullAt(selectedOptions, index);\n    this.selectionChanged(selectedOptions, event);\n    this.setState({ selectedOptions });\n  };\n\n  selectionChanged = (\n    selectedOptions: Array<any>,\n    event: SyntheticEvent<any>\n  ) => {\n    if (this.props.onChange) this.props.onChange(selectedOptions, event);\n  };\n\n  // returns an object containing props, theme, and method handlers\n  // associated with rendering this.state.selectedOptions, the user can call\n  // this in the body of the renderSelections function\n  getSelectionProps = ({\n    removeSelection\n  }: { removeSelection: Function } = {}) => {\n    const { themeId } = this.props;\n    const { inputValue, isOpen, selectedOptions, composedTheme } = this.state;\n    return {\n      inputValue,\n      isOpen,\n      selectedOptions,\n      theme: composedTheme[themeId],\n      removeSelection: (index: number, event: SyntheticEvent<>) =>\n        // the user's custom removeSelection event handler is composed with\n        // the internal functionality of Autocomplete (this.removeOption)\n        composeFunctions(removeSelection, this.removeOption)(index, event)\n    };\n  };\n\n  render() {\n    // destructuring props ensures only the \"...rest\" get passed down\n    const {\n      context,\n      invalidCharsRegex,\n      multipleSameSelections,\n      sortAlphabetically,\n      skin,\n      theme,\n      themeOverrides,\n      onChange,\n      error,\n      ...rest\n    } = this.props;\n\n    const AutocompleteSkin = skin || context.skins[IDENTIFIERS.AUTOCOMPLETE];\n\n    return (\n      <GlobalListeners\n        mouseIsOverOptions={this.state.mouseIsOverOptions}\n        optionsIsOpen={this.state.isOpen}\n        optionsIsOpeningUpward={this.props.isOpeningUpward}\n        optionsRef={this.optionsElement}\n        rootRef={this.rootElement}\n        toggleOpen={this.toggleOpen}\n      >\n        {({ optionsMaxHeight }) => (\n          <AutocompleteSkin\n            error={error || this.state.error}\n            filteredOptions={this.state.filteredOptions}\n            getSelectionProps={this.getSelectionProps}\n            handleAutocompleteClick={this.handleAutocompleteClick}\n            handleChange={this.handleChange}\n            handleInputChange={this.handleInputChange}\n            inputRef={this.inputElement}\n            inputValue={this.state.inputValue}\n            isOpen={this.state.isOpen}\n            onKeyDown={this.onKeyDown}\n            optionsMaxHeight={optionsMaxHeight}\n            optionsRef={this.optionsElement}\n            removeOption={this.removeOption}\n            rootRef={this.rootElement}\n            selectedOptions={this.state.selectedOptions}\n            suggestionsRef={this.suggestionsElement}\n            theme={this.state.composedTheme}\n            toggleMouseLocation={this.toggleMouseLocation}\n            toggleOpen={this.toggleOpen}\n            {...rest}\n          />\n        )}\n      </GlobalListeners>\n    );\n  }\n\n  // ======== PRIVATE METHOD ==========\n\n  _removeOptions = () => {\n    const { onChange } = this.props;\n    onChange ? onChange([]) : null;\n    this.setState({ selectedOptions: [], inputValue: '' });\n  };\n\n  _filterOptions = (value: string) => {\n    let filteredOptions = [];\n\n    if (value !== '') {\n      _.some(this.props.options, (option) => {\n        if (_.startsWith(option, value)) {\n          filteredOptions.push(option);\n        }\n      });\n    } else {\n      filteredOptions = this.props.options;\n    }\n\n    return filteredOptions;\n  };\n\n  _filterInvalidChars = (value: string) => {\n    let filteredValue = '';\n\n    if (this.props.invalidCharsRegex.test(value)) {\n      filteredValue = value.replace(this.props.invalidCharsRegex, '');\n    } else {\n      filteredValue = value;\n    }\n\n    return filteredValue;\n  };\n\n  _setInputValue = (value: string) => {\n    const filteredValue = this._filterInvalidChars(value);\n    const filteredOptions = this._filterOptions(filteredValue);\n    this.setState({\n      isOpen: true,\n      inputValue: filteredValue,\n      filteredOptions\n    });\n  }\n}\n\nexport const Autocomplete = withTheme(AutocompleteBase);\n"]}