{"version":3,"sources":["../../source/components/InfiniteScroll.js"],"names":["InfiniteScrollBase","props","_handleFetchData","fetchData","setState","bind","_handleScroll","state","error","isLoading","hasMoreData","_checkForScrollBottom","scrollContainer","threshold","current","offsetHeight","scrollTop","scrollHeight","_isFunction","renderProp","context","themeId","theme","themeOverrides","composedTheme","ROOT_THEME_API","data","addEventListener","nextProps","className","renderItems","skin","InfiniteScrollSkin","skins","IDENTIFIERS","INFINITE_SCROLL","Component","displayName","defaultProps","InfiniteScroll"],"mappings":"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","file":"InfiniteScroll.js","sourcesContent":["// @flow\nimport React, { Component } from 'react';\nimport type { ComponentType, Node } from 'react';\n// $FlowFixMe\nimport createRef from 'create-react-ref/lib/createRef';\n\n// utilities\nimport { createEmptyContext, withTheme } from './HOC/withTheme';\nimport { composeTheme, addThemeId, didThemePropsChange } from '../utils/themes';\n\n// constants\nimport { IDENTIFIERS } from '.';\nimport type { ReactElementRef } from '../utils/types.js';\nimport type { ThemeContextProp } from './HOC/withTheme';\n\ntype Props = {\n  className?: string,\n  context: ThemeContextProp,\n  fetchData: Function,\n  renderItems?: Function,\n  skin?: ComponentType<any>,\n  theme: ?Object, // will take precedence over theme in context if passed\n  themeId: string,\n  themeOverrides: Object,\n  threshold: number\n};\n\ntype State = {\n  composedTheme: Object,\n  data: Object | Array<{}>,\n  error: boolean | string | Node,\n  hasMoreData: boolean,\n  isLoading: boolean\n};\n\nclass InfiniteScrollBase extends Component<Props, State> {\n  // declare ref types\n  scrollContainer: ReactElementRef<typeof HTMLElement>;\n\n  // define static properties\n  static displayName = 'InfiniteScroll';\n  static defaultProps = {\n    context: createEmptyContext(),\n    fetchData() {},\n    theme: null,\n    themeId: IDENTIFIERS.INFINITE_SCROLL,\n    themeOverrides: {},\n    threshold: 250\n  };\n\n  constructor(props: Props) {\n    super(props);\n    const { context, themeId, theme, themeOverrides } = props;\n\n    // refs\n    this.scrollContainer = createRef();\n\n    this.state = {\n      composedTheme: composeTheme(\n        addThemeId(theme || context.theme, themeId),\n        addThemeId(themeOverrides, themeId),\n        context.ROOT_THEME_API\n      ),\n      data: [],\n      error: false,\n      isLoading: false,\n      hasMoreData: true\n    };\n  }\n\n  componentWillMount() {\n    this._handleFetchData();\n  }\n\n  componentDidMount() {\n    const { scrollContainer } = this;\n    if (!scrollContainer.current) return;\n    scrollContainer.current.addEventListener('scroll', this._handleScroll);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    didThemePropsChange(this.props, nextProps, this.setState.bind(this));\n  }\n\n  // calls user's fetchData function from props\n  _handleFetchData = () => this.props.fetchData(this.setState.bind(this))\n\n  // scroll event listener attached to scrollContainer element\n  _handleScroll = () => {\n    const { error, isLoading, hasMoreData } = this.state;\n\n    // return early for error, loading, or lack of future data\n    if (error || isLoading || !hasMoreData) { return; }\n    return this._checkForScrollBottom();\n  };\n\n  // prevents new data fetch until user has scrolled near bottom of existing data\n  _checkForScrollBottom = () => {\n    const { scrollContainer, props: { threshold } } = this;\n    if (!scrollContainer.current) return;\n    const { offsetHeight, scrollTop, scrollHeight } = scrollContainer.current;\n\n    if (offsetHeight + scrollTop >= scrollHeight - threshold) {\n      return this._handleFetchData();\n    }\n  };\n\n  _isFunction = (renderProp: ?Function) => (renderProp && typeof renderProp === 'function')\n\n  render() {\n    const {\n      props: {\n        className,\n        context,\n        renderItems,\n        skin,\n        themeId\n      },\n      state: {\n        composedTheme,\n        data,\n        error,\n        hasMoreData,\n        isLoading\n      },\n      scrollContainer\n    } = this;\n\n    if (!this._isFunction(renderItems)) { return null; }\n    const InfiniteScrollSkin = skin || context.skins[IDENTIFIERS.INFINITE_SCROLL];\n\n    return (\n      <InfiniteScrollSkin\n        className={className}\n        data={data}\n        error={error}\n        hasMoreData={hasMoreData}\n        isLoading={isLoading}\n        renderItems={renderItems}\n        scrollContainerRef={scrollContainer}\n        theme={composedTheme}\n        themeId={themeId}\n      />\n    );\n  }\n}\n\nexport const InfiniteScroll = withTheme(InfiniteScrollBase);\n"]}