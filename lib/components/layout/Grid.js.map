{"version":3,"sources":["../../../source/components/layout/Grid.js"],"names":["GridBase","props","_assembleInlineGrid","className","gridProps","alignItems","autoColumns","autoRows","center","columnGap","columns","gap","justifyItems","rowGap","rows","template","templateAreas","inlineClasses","gridAutoColumns","gridAutoRows","gridTemplateColumns","gridTemplateRows","gridColumnGap","gridGap","gridRowGap","gridTemplate","gridTemplateAreas","context","themeId","theme","themeOverrides","state","composedTheme","ROOT_THEME_API","nextProps","setState","bind","React","Children","map","children","child","type","displayName","cloneElement","inlineGrid","renderChildren","Component","defaultProps","IDENTIFIERS","GRID","Grid"],"mappings":";;;;;;;;;;;;;;;;;;;AACA;;;;AAKA;;AAGA;;AACA;;AACA;;AACA;;AAGA;;;;;;;;;;;;AAVA;;;AAGA;;;AAMA;;;IA2BMA,Q;;;AACJ;AAaA,oBAAYC,KAAZ,EAA0B;AAAA;;AAAA,oHAClBA,KADkB;;AAAA,UAmB1BC,mBAnB0B,GAmBJ,YAAM;AAAA,wBACU,MAAKD,KADf;AAAA,UAClBE,SADkB,eAClBA,SADkB;AAAA,UACJC,SADI;;AAG1B;;;AACA,UAAI,uBAAQ,mCAAYA,SAAZ,EAAR,CAAJ,EAAuC;AAAE;AAAS;;AAJxB,UAOxBC,UAPwB,GAmBtBD,SAnBsB,CAOxBC,UAPwB;AAAA,UAQxBC,WARwB,GAmBtBF,SAnBsB,CAQxBE,WARwB;AAAA,UASxBC,QATwB,GAmBtBH,SAnBsB,CASxBG,QATwB;AAAA,UAUxBC,MAVwB,GAmBtBJ,SAnBsB,CAUxBI,MAVwB;AAAA,UAWxBC,SAXwB,GAmBtBL,SAnBsB,CAWxBK,SAXwB;AAAA,UAYxBC,OAZwB,GAmBtBN,SAnBsB,CAYxBM,OAZwB;AAAA,UAaxBC,GAbwB,GAmBtBP,SAnBsB,CAaxBO,GAbwB;AAAA,UAcxBC,YAdwB,GAmBtBR,SAnBsB,CAcxBQ,YAdwB;AAAA,UAexBC,MAfwB,GAmBtBT,SAnBsB,CAexBS,MAfwB;AAAA,UAgBxBC,IAhBwB,GAmBtBV,SAnBsB,CAgBxBU,IAhBwB;AAAA,UAiBxBC,QAjBwB,GAmBtBX,SAnBsB,CAiBxBW,QAjBwB;AAAA,UAkBxBC,aAlBwB,GAmBtBZ,SAnBsB,CAkBxBY,aAlBwB;;AAqB1B;;AACA,UAAMC,gBAAgB;AACpBZ,oBAAYG,SAAS,QAAT,GAAoBH,UADZ;AAEpBa,yBAAiBZ,WAFG;AAGpBa,sBAAcZ,QAHM;AAIpBa,6BAAqBV,OAJD;AAKpBW,0BAAkBP,IALE;AAMpBQ,uBAAeX,MAAM,KAAN,GAAc,wBAAWF,SAAX,CANT;AAOpBc,iBAAS,wBAAWZ,GAAX,CAPW;AAQpBa,oBAAYb,MAAM,KAAN,GAAc,wBAAWE,MAAX,CARN;AASpBY,sBAAcV,QATM;AAUpBW,2BAAmB,iCAAoBV,aAApB,CAVC;AAWpBJ,sBAAcJ,SAAS,QAAT,GAAoBI;AAXd,OAAtB;;AAcA;AACA,aAAO,sBAAOK,aAAP,CAAP;AACD,KAzDyB;;AAAA,QAGhBU,OAHgB,GAG4B1B,KAH5B,CAGhB0B,OAHgB;AAAA,QAGPC,OAHO,GAG4B3B,KAH5B,CAGP2B,OAHO;AAAA,QAGEC,KAHF,GAG4B5B,KAH5B,CAGE4B,KAHF;AAAA,QAGSC,cAHT,GAG4B7B,KAH5B,CAGS6B,cAHT;;;AAKxB,UAAKC,KAAL,GAAa;AACXC,qBAAe,0BACb,wBAAWH,SAASF,QAAQE,KAA5B,EAAmCD,OAAnC,CADa,EAEb,wBAAWE,cAAX,EAA2BF,OAA3B,CAFa,EAGbD,QAAQM,cAHK;AADJ,KAAb;AALwB;AAYzB;;;;8CAEyBC,S,EAAkB;AAC1C,uCAAoB,KAAKjC,KAAzB,EAAgCiC,SAAhC,EAA2C,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAA3C;AACD;;AAED;;;;mCAyCeP,K,EAAe;AAC5B,aAAOQ,gBAAMC,QAAN,CAAeC,GAAf,CAAmB,KAAKtC,KAAL,CAAWuC,QAA9B,EAAwC,iBAAS;AACtD,YAAIC,MAAMC,IAAN,CAAWC,WAAX,KAA2B,UAA/B,EAA2C;AACzC,iBAAON,gBAAMO,YAAN,CAAmBH,KAAnB,EAA0B,EAAEZ,YAAF,EAA1B,CAAP;AACD;AACD,eAAOY,KAAP;AACD,OALM,CAAP;AAMD;;;6BAEQ;AAAA,mBACwB,KAAKxC,KAD7B;AAAA,UACC2B,OADD,UACCA,OADD;AAAA,UACUzB,SADV,UACUA,SADV;;;AAGP,UAAM0C,aAAa,KAAK3C,mBAAL,EAAnB;AACA,UAAM2B,QAAQ,KAAKE,KAAL,CAAWC,aAAX,CAAyBJ,OAAzB,CAAd;;AAEA,aACE;AAAC,kBAAD;AAAA;AACE,qBAAWzB,SADb;AAEE,uBAAa0B,KAFf;AAGE,yBAAe,CAAC,WAAD,CAHjB;AAIE,wBAAcgB;AAJhB;AAMG,aAAKC,cAAL,CAAoBjB,KAApB;AANH,OADF;AAUD;;;;EAlGoBkB,gB;;AAAjB/C,Q,CAEG2C,W,GAAc,M;AAFjB3C,Q,CAGGgD,Y,GAAe;AACpBvC,aAAW,CADS;AAEpBkB,WAAS,oCAFW;AAGpBhB,OAAK,CAHe;AAIpBE,UAAQ,CAJY;AAKpBG,iBAAe,EALK;AAMpBa,SAAO,IANa;AAOpBD,WAASqB,cAAYC,IAPD;AAQpBpB,kBAAgB;AARI,C;AAkGjB,IAAMqB,sBAAO,0BAAUnD,QAAV,CAAb","file":"Grid.js","sourcesContent":["// @flow\nimport React, { Component } from 'react';\nimport type { Node } from 'react';\nimport { pickBy, isEmpty } from 'lodash';\n\n// components\nimport { Base } from './Base';\n\n// utilities\nimport { createEmptyContext, withTheme } from '../HOC/withTheme';\nimport { numberToPx } from '../../utils/props';\nimport { formatTemplateAreas } from '../../utils/layout';\nimport { composeTheme, addThemeId, didThemePropsChange } from '../../utils/themes';\n\n// constants\nimport { IDENTIFIERS } from '..';\nimport type { ThemeContextProp } from '../HOC/withTheme';\n\ntype Props = {\n  alignItems?: string,\n  autoColumns?: string,\n  autoRows?: string,\n  className?: string,\n  center?: boolean,\n  children?: Node,\n  columnGap: string | number,\n  columns?: string,\n  context: ThemeContextProp,\n  gap: string | number,\n  justifyItems?: string,\n  rowGap: string | number,\n  rows?: string,\n  template?: string,\n  templateAreas: Array<string>,\n  theme: ?Object,\n  themeId: string,\n  themeOverrides: Object\n};\n\ntype State = { composedTheme: Object };\n\nclass GridBase extends Component<Props, State> {\n  // define static properties\n  static displayName = 'Grid';\n  static defaultProps = {\n    columnGap: 5,\n    context: createEmptyContext(),\n    gap: 0,\n    rowGap: 5,\n    templateAreas: [],\n    theme: null,\n    themeId: IDENTIFIERS.GRID,\n    themeOverrides: {}\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    const { context, themeId, theme, themeOverrides } = props;\n\n    this.state = {\n      composedTheme: composeTheme(\n        addThemeId(theme || context.theme, themeId),\n        addThemeId(themeOverrides, themeId),\n        context.ROOT_THEME_API\n      )\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    didThemePropsChange(this.props, nextProps, this.setState.bind(this));\n  }\n\n  // creates obj passed Base component's inline styles (see render)\n  _assembleInlineGrid = () => {\n    const { className, ...gridProps } = this.props;\n\n    // return early if gridProps are empty\n    if (isEmpty(pickBy({ ...gridProps }))) { return; }\n\n    const {\n      alignItems,\n      autoColumns,\n      autoRows,\n      center,\n      columnGap,\n      columns,\n      gap,\n      justifyItems,\n      rowGap,\n      rows,\n      template,\n      templateAreas\n    } = gridProps;\n\n    // obj with correct css grid class names\n    const inlineClasses = {\n      alignItems: center ? 'center' : alignItems,\n      gridAutoColumns: autoColumns,\n      gridAutoRows: autoRows,\n      gridTemplateColumns: columns,\n      gridTemplateRows: rows,\n      gridColumnGap: gap ? false : numberToPx(columnGap),\n      gridGap: numberToPx(gap),\n      gridRowGap: gap ? false : numberToPx(rowGap),\n      gridTemplate: template,\n      gridTemplateAreas: formatTemplateAreas(templateAreas),\n      justifyItems: center ? 'center' : justifyItems\n    };\n\n    // filters out keys with false(sy) values\n    return pickBy(inlineClasses);\n  }\n\n  renderChildren(theme: Object) {\n    return React.Children.map(this.props.children, child => {\n      if (child.type.displayName === 'GridItem') {\n        return React.cloneElement(child, { theme });\n      }\n      return child;\n    });\n  }\n\n  render() {\n    const { themeId, className } = this.props;\n\n    const inlineGrid = this._assembleInlineGrid();\n    const theme = this.state.composedTheme[themeId];\n\n    return (\n      <Base\n        className={className}\n        stylesToAdd={theme}\n        activeClasses={['container']}\n        inlineStyles={inlineGrid}\n      >\n        {this.renderChildren(theme)}\n      </Base>\n    );\n  }\n}\n\nexport const Grid = withTheme(GridBase);\n"]}