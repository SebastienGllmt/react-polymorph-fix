{"version":3,"sources":["../../../source/skins/simple/SelectSkin.js"],"names":["SelectSkin","props","selectedOption","getSelectedOption","inputValue","label","theme","themeId","rootRef","className","select","isOpen","isOpeningUpward","openUpward","selectInput","InputSkin","inputRef","handleInputClick","placeholder","error","OptionsSkin","optionsRef","optionsMaxHeight","options","handleChange","optionRenderer","length","toggleMouseLocation","toggleOpen"],"mappings":";;;;;;;AACA;;;;AAIA;;;;AAIA;;AACA;;AAGA;;AACA;;;;AAFA;;;AAJA;AAqCO,IAAMA,kCAAa,SAAbA,UAAa,CAACC,KAAD,EAAkB;AAC1C,MAAMC,iBAAiBD,MAAME,iBAAN,EAAvB;AACA,MAAMC,aAAaF,iBAAiBA,eAAeG,KAAhC,GAAwC,EAA3D;AAF0C,MAGlCC,KAHkC,GAGfL,KAHe,CAGlCK,KAHkC;AAAA,MAG3BC,OAH2B,GAGfN,KAHe,CAG3BM,OAH2B;;AAI1C,SACE;AAAA;AAAA;AACE,WAAKN,MAAMO,OADb;AAEE,iBAAW,0BAAW,CACpBP,MAAMQ,SADc,EAEpBH,MAAMC,OAAN,EAAeG,MAFK,EAGpBT,MAAMU,MAAN,GAAeL,MAAMC,OAAN,EAAeI,MAA9B,GAAuC,IAHnB,EAIpBV,MAAMW,eAAN,GAAwBN,MAAMC,OAAN,EAAeM,UAAvC,GAAoD,IAJhC,CAAX;AAFb;AASE;AAAA;AAAA,QAAK,WAAWP,MAAMC,OAAN,EAAeO,WAA/B;AACE,oCAAC,YAAD;AACE,cAAMC,oBADR;AAEE,eAAOT,KAFT;AAGE,kBAAUL,MAAMe,QAHlB;AAIE,eAAOf,MAAMI,KAJf;AAKE,eAAOD,UALT;AAME,iBAASH,MAAMgB,gBANjB;AAOE,qBAAahB,MAAMiB,WAPrB;AAQE,eAAOjB,MAAMkB,KARf;AASE;AATF;AADF,KATF;AAsBE,kCAAC,gBAAD;AACE,YAAMC,wBADR;AAEE,aAAOd,KAFT;AAGE,cAAQL,MAAMU,MAHhB;AAIE,kBAAYV,MAAMoB,UAJpB;AAKE,wBAAkBpB,MAAMqB,gBAL1B;AAME,eAASrB,MAAMsB,OANjB;AAOE,uBAAiBtB,MAAMW,eAPzB;AAQE,gBAAUX,MAAMuB,YARlB;AASE,sBAAgBvB,MAAMwB,cATxB;AAUE,sBAAgBvB,cAVlB;AAWE,iBAAW,CAACD,MAAMsB,OAAN,CAAcG,MAX5B;AAYE,iBAAWzB,MAAMe,QAZnB;AAaE,2BAAqBf,MAAM0B,mBAb7B;AAcE,kBAAY1B,MAAM2B;AAdpB;AAtBF,GADF;AAyCD,CA7CM;;AAzCP","file":"SelectSkin.js","sourcesContent":["// @flow\nimport React from 'react';\nimport type { Element, ElementRef } from 'react';\n\n// external libraries\nimport classnames from 'classnames';\n\n\n// components\nimport { Options } from '../../components/Options';\nimport { Input } from '../../components/Input';\n\n// skins\nimport { OptionsSkin } from './OptionsSkin';\nimport { InputSkin } from './InputSkin';\n\ntype Props = {\n  className: string,\n  error: string | Element<any>,\n  getSelectedOption: Function,\n  handleChange: Function,\n  handleInputClick: Function,\n  inputRef: ElementRef<'input'>,\n  isOpen: boolean,\n  isOpeningUpward: boolean,\n  label: string | Element<any>,\n  onBlur: Function,\n  onChange: Function,\n  onFocus: Function,\n  options: Array<{\n    isDisabled: boolean,\n    value: any\n  }>,\n  optionRenderer: Function,\n  optionsRef: ElementRef<any>,\n  optionsMaxHeight: number,\n  placeholder: string,\n  rootRef: ElementRef<*>,\n  theme: Object, // will take precedence over theme in context if passed\n  themeId: string,\n  toggleOpen: Function,\n  toggleMouseLocation: Function,\n  value: string\n};\n\nexport const SelectSkin = (props: Props) => {\n  const selectedOption = props.getSelectedOption();\n  const inputValue = selectedOption ? selectedOption.label : '';\n  const { theme, themeId } = props;\n  return (\n    <div\n      ref={props.rootRef}\n      className={classnames([\n        props.className,\n        theme[themeId].select,\n        props.isOpen ? theme[themeId].isOpen : null,\n        props.isOpeningUpward ? theme[themeId].openUpward : null\n      ])}\n    >\n      <div className={theme[themeId].selectInput}>\n        <Input\n          skin={InputSkin}\n          theme={theme}\n          inputRef={props.inputRef}\n          label={props.label}\n          value={inputValue}\n          onClick={props.handleInputClick}\n          placeholder={props.placeholder}\n          error={props.error}\n          readOnly\n        />\n      </div>\n      <Options\n        skin={OptionsSkin}\n        theme={theme}\n        isOpen={props.isOpen}\n        optionsRef={props.optionsRef}\n        optionsMaxHeight={props.optionsMaxHeight}\n        options={props.options}\n        isOpeningUpward={props.isOpeningUpward}\n        onChange={props.handleChange}\n        optionRenderer={props.optionRenderer}\n        selectedOption={selectedOption}\n        noResults={!props.options.length}\n        targetRef={props.inputRef}\n        toggleMouseLocation={props.toggleMouseLocation}\n        toggleOpen={props.toggleOpen}\n      />\n    </div>\n  );\n};\n"]}